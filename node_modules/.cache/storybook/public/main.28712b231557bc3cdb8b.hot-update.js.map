{"version":3,"file":"main.28712b231557bc3cdb8b.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;;AAeA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAIA;;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;;AAEA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAIA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAMA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AAFA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAOA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAMA","sources":["webpack://@toast-ui/calendar/./src/components/popup/eventDetailPopup.tsx"],"sourcesContent":["import { h } from 'preact';\nimport { createPortal } from 'preact/compat';\nimport { useLayoutEffect, useMemo, useRef, useState } from 'preact/hooks';\n\nimport { EventDetailSectionDetail } from '@src/components/popup/eventDetailSectionDetail';\nimport { EventDetailSectionHeader } from '@src/components/popup/eventDetailSectionHeader';\nimport { Template } from '@src/components/template';\nimport { DetailPopupArrowDirection, HALF_OF_POPUP_ARROW_HEIGHT } from '@src/constants/popup';\nimport { useDispatch, useStore } from '@src/contexts/calendarStore';\nimport { useEventBus } from '@src/contexts/eventBus';\nimport { useFloatingLayer } from '@src/contexts/floatingLayer';\nimport { useLayoutContainer } from '@src/contexts/layoutContainer';\nimport { cls } from '@src/helpers/css';\nimport { isLeftOutOfLayout, isTopOutOfLayout } from '@src/helpers/popup';\nimport { useCalendarColor } from '@src/hooks/calendar/useCalendarColor';\nimport { optionsSelector } from '@src/selectors';\nimport { eventDetailPopupParamSelector } from '@src/selectors/popup';\nimport { allOptionSelector } from '@src/selectors/options';\n\nimport TZDate from '@src/time/date';\nimport { isNil } from '@src/utils/type';\n\nimport type { StyleProp } from '@t/components/common';\nimport type { Rect } from '@t/store';\n\nconst classNames = {\n  popupContainer: cls('popup-container'),\n  detailContainer: cls('detail-container'),\n  topLine: cls('popup-top-line'),\n  border: cls('popup-arrow-border'),\n  fill: cls('popup-arrow-fill'),\n  sectionButton: cls('popup-section', 'section-button'),\n  content: cls('content'),\n  editIcon: cls('icon', 'ic-edit'),\n  deleteIcon: cls('icon', 'ic-delete'),\n  editButton: cls('edit-button'),\n  deleteButton: cls('delete-button'),\n  verticalLine: cls('vertical-line'),\n};\n\nfunction calculatePopupPosition(eventRect: Rect, layoutRect: Rect, popupRect: Rect) {\n  let top = eventRect.top + eventRect.height / 2 - popupRect.height / 2;\n  let left = eventRect.left + eventRect.width;\n\n  if (isTopOutOfLayout(top, layoutRect, popupRect)) {\n    top = layoutRect.top + layoutRect.height - popupRect.height;\n  }\n\n  if (isLeftOutOfLayout(left, layoutRect, popupRect)) {\n    left = eventRect.left - popupRect.width;\n  }\n\n  return [\n    Math.max(top, layoutRect.top) + window.scrollY,\n    Math.max(left, layoutRect.left) + window.scrollX,\n  ];\n}\n\nfunction calculatePopupArrowPosition(eventRect: Rect, layoutRect: Rect, popupRect: Rect) {\n  const top = eventRect.top + eventRect.height / 2 + window.scrollY;\n  const popupLeft = eventRect.left + eventRect.width;\n\n  const isOutOfLayout = popupLeft + popupRect.width > layoutRect.left + layoutRect.width;\n  const direction = isOutOfLayout\n    ? DetailPopupArrowDirection.right\n    : DetailPopupArrowDirection.left;\n\n  return { top, direction };\n}\n\nexport function EventDetailPopup() {\n  const { useFormPopup } = useStore(optionsSelector);\n  const popupParams = useStore(eventDetailPopupParamSelector);\n  const options = useStore(allOptionSelector);\n  console.log({options});\n  \n  const { event, eventRect } = popupParams ?? {};\n\n  const { showFormPopup, hideDetailPopup } = useDispatch('popup');\n\n  const calendarColor = useCalendarColor(event);\n  const layoutContainer = useLayoutContainer();\n  const detailPopupSlot = useFloatingLayer('detailPopupSlot');\n  const eventBus = useEventBus();\n  const popupContainerRef = useRef<HTMLDivElement>(null);\n\n  const [style, setStyle] = useState<StyleProp>({});\n  const [arrowTop, setArrowTop] = useState<number>(0);\n  const [arrowDirection, setArrowDirection] = useState<DetailPopupArrowDirection>(\n    DetailPopupArrowDirection.left\n  );\n\n  const popupArrowClassName = useMemo(() => {\n    const right = arrowDirection === DetailPopupArrowDirection.right;\n    const left = arrowDirection === DetailPopupArrowDirection.left;\n\n    return cls('popup-arrow', { right, left });\n  }, [arrowDirection]);\n\n  useLayoutEffect(() => {\n    if (popupContainerRef.current && eventRect && layoutContainer) {\n      const layoutRect = layoutContainer.getBoundingClientRect();\n      const popupRect = popupContainerRef.current.getBoundingClientRect();\n\n      const [top, left] = calculatePopupPosition(eventRect, layoutRect, popupRect);\n      const { top: arrowTopPosition, direction } = calculatePopupArrowPosition(\n        eventRect,\n        layoutRect,\n        popupRect\n      );\n\n      setStyle({ top, left });\n      setArrowTop(arrowTopPosition - top - HALF_OF_POPUP_ARROW_HEIGHT);\n      setArrowDirection(direction);\n    }\n  }, [eventRect, layoutContainer]);\n\n  if (isNil(event) || isNil(eventRect) || isNil(detailPopupSlot)) {\n    return null;\n  }\n\n  const {\n    title = '',\n    isAllday = false,\n    start = new TZDate(),\n    end = new TZDate(),\n    location,\n    state,\n    isReadOnly,\n    isPrivate,\n  } = event;\n\n  const popupArrowPointPosition = {\n    top: eventRect.top + eventRect.height / 2,\n    left: eventRect.left + eventRect.width / 2,\n  };\n\n  const onClickEditButton = () => {\n    if (useFormPopup) {\n      showFormPopup({\n        isCreationPopup: false,\n        event,\n        title,\n        location,\n        start,\n        end,\n        isAllday,\n        isPrivate,\n        eventState: state,\n        popupArrowPointPosition,\n      });\n    } else {\n      eventBus.fire('beforeUpdateEvent', { event: event.toEventObject(), changes: {} });\n    }\n  };\n\n  const onClickDeleteButton = () => {\n    eventBus.fire('beforeDeleteEvent', event.toEventObject());\n    hideDetailPopup();\n  };\n  // console.log({zxczxcad: useStore()});\n\n  return createPortal(\n    <div role=\"dialog\" className={classNames.popupContainer} ref={popupContainerRef} style={style}>\n      <div className={classNames.detailContainer}>\n        {/* {props.onRenderEventDetailPopup(event)} */}\n        <EventDetailSectionHeader event={event} />\n        <EventDetailSectionDetail event={event} />\n        {!isReadOnly && (\n          <div className={classNames.sectionButton}>\n            <button type=\"button\" className={classNames.editButton} onClick={onClickEditButton}>\n              <span className={classNames.editIcon} />\n              <span className={classNames.content}>\n                <Template template=\"popupEdit\" as=\"span\" />\n              </span>\n            </button>\n            <div className={classNames.verticalLine} />\n            <button type=\"button\" className={classNames.deleteButton} onClick={onClickDeleteButton}>\n              <span className={classNames.deleteIcon} />\n              <span className={classNames.content}>\n                <Template template=\"popupDelete\" as=\"span\" />\n              </span>\n            </button>\n          </div>\n        )}\n      </div>\n      <div\n        className={classNames.topLine}\n        style={{ backgroundColor: calendarColor.backgroundColor }}\n      />\n      <div className={popupArrowClassName}>\n        <div className={classNames.border} style={{ top: arrowTop }}>\n          <div className={classNames.fill} />\n        </div>\n      </div>\n    </div>,\n    detailPopupSlot\n  );\n}\n"],"names":[],"sourceRoot":""}