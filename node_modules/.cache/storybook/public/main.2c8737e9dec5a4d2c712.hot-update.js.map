{"version":3,"file":"main.2c8737e9dec5a4d2c712.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AACA;AACA;AAFA;AAAA;AAKA;AAAA;AAAA;AACA;;AAEA;AACA;;AACA;AAAA;;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;;AAGA;AACA;AAAA;AADA;AAAA;;AAIA;AAAA;AAEA;AAFA;AAAA;AAIA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAAA;AAGA","sources":["webpack://@toast-ui/calendar/./src/components/view/month.tsx"],"sourcesContent":["import { h } from 'preact';\nimport { useMemo } from 'preact/hooks';\n\nimport { GridHeader } from '@src/components/dayGridCommon/gridHeader';\nimport { DayGridMonth } from '@src/components/dayGridMonth/dayGridMonth';\nimport { Layout } from '@src/components/layout';\nimport { useStore } from '@src/contexts/calendarStore';\nimport { cls } from '@src/helpers/css';\nimport { createDateMatrixOfMonth } from '@src/helpers/grid';\nimport { optionsSelector, viewSelector } from '@src/selectors';\nimport { getRowStyleInfo, isWeekend } from '@src/time/datetime';\nimport { capitalize } from '@src/utils/string';\n\nimport type { MonthOptions } from '@t/options';\nimport type { CalendarStore } from '@t/store';\nimport type { CellInfo } from '@t/time/datetime';\n\nfunction getMonthDayNames(options: CalendarStore['options']) {\n  const { dayNames, startDayOfWeek, workweek } = options.month as Required<MonthOptions>;\n  const dayIndices = [...Array(7)].map((_, i) => (startDayOfWeek + i) % 7);\n  const monthDayNames = dayIndices.map((i) => ({\n    day: i,\n    label: capitalize(dayNames[i]),\n  }));\n\n  return monthDayNames.filter((dayNameInfo) => (workweek ? !isWeekend(dayNameInfo.day) : true));\n}\n\nexport function Month() {\n  const options = useStore(optionsSelector);\n  const { renderDate } = useStore(viewSelector);\n\n  const dayNames = getMonthDayNames(options);\n  const monthOptions = options.month as Required<MonthOptions>;\n  const { narrowWeekend, startDayOfWeek, workweek } = monthOptions;\n\n  const dateMatrix = useMemo(\n    () => createDateMatrixOfMonth(renderDate, monthOptions),\n    [monthOptions, renderDate]\n  );\n  const { rowStyleInfo, cellWidthMap } = useMemo(\n    () => getRowStyleInfo(dayNames.length, narrowWeekend, startDayOfWeek, workweek),\n    [dayNames.length, narrowWeekend, startDayOfWeek, workweek]\n  );\n  const rowInfo: CellInfo[] = rowStyleInfo.map((cellStyleInfo, index) => ({\n    ...cellStyleInfo,\n    date: dateMatrix[0][index],\n  }));\n  console.log({monthOptions});\n  return (\n    <Layout className={cls('month')}>\n      <GridHeader\n        type=\"month\"\n        dayNames={dayNames}\n        options={monthOptions}\n        rowStyleInfo={rowStyleInfo}\n      />\n      <DayGridMonth dateMatrix={dateMatrix} rowInfo={rowInfo} cellWidthMap={cellWidthMap} />\n    </Layout>\n  );\n}\n"],"names":[],"sourceRoot":""}