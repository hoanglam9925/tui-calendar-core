{"version":3,"file":"main.950b3a6eb3b4eb02bc9e.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAFA;;AAKA;AAAA;AAAA;AAAA;;AACA;AAAA;;AACA;AAEA;AACA;AAFA;AAOA;AACA;;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAFA;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AADA","sources":["webpack://@toast-ui/calendar/./stories/eventDetailPopup.stories.tsx"],"sourcesContent":["import { Fragment, h } from 'preact';\n\nimport type { Story } from '@storybook/preact';\n\nimport { EventDetailPopup } from '@src/components/popup/eventDetailPopup';\nimport { EventFormPopup } from '@src/components/popup/eventFormPopup';\nimport { useDispatch } from '@src/contexts/calendarStore';\nimport EventModel from '@src/model/eventModel';\nimport TZDate from '@src/time/date';\n\nimport { ProviderWrapper } from '@stories/util/providerWrapper';\n\nimport type { PropsWithChildren } from '@t/components/common';\nimport type { EventDetailPopupParam } from '@t/store';\n\nexport default {\n  component: EventDetailPopup,\n  title: 'Popups/EventDetailPopup',\n};\n\nfunction Wrapper({ children, event, eventRect }: PropsWithChildren<EventDetailPopupParam>) {\n  const { showDetailPopup } = useDispatch('popup');\n  showDetailPopup(\n    {\n      event,\n      eventRect,\n    },\n    false\n  );\n\n  return <Fragment>{children}</Fragment>;\n}\n\nconst Template: Story<EventDetailPopupParam> = ({ event }) => (\n  <ProviderWrapper>\n    <Wrapper\n      event={event}\n      eventRect={{\n        top: 0,\n        left: 0,\n        width: 100,\n        height: 100,\n      }}\n    >\n      {/* <EventDetailPopup /> */}\n      <EventFormPopup />\n    </Wrapper>\n  </ProviderWrapper>\n);\n\nexport const EventDetailPopupWithCalendars = Template.bind({});\nEventDetailPopupWithCalendars.args = {\n  event: new EventModel({\n    id: 'id',\n    calendarId: 'calendar id',\n    title: 'title',\n    body: 'body',\n    start: new TZDate(),\n    end: new TZDate(),\n    isAllday: false,\n    location: 'location',\n    attendees: ['attendee1', 'attendee2'],\n    recurrenceRule: 'recurrence rule',\n    isReadOnly: false,\n    backgroundColor: '#03bd9e',\n    state: 'Busy',\n  }),\n};\n"],"names":[],"sourceRoot":""}