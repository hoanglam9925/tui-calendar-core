{"version":3,"file":"main.c725411425ac2484ef2f.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAYA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AAEA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AAEA;AAAA;AAAA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAaA","sources":["webpack://@toast-ui/calendar/./src/components/layout.tsx"],"sourcesContent":["import type { ComponentChildren, ComponentProps } from 'preact';\nimport { h, toChildArray } from 'preact';\nimport { useLayoutEffect, useMemo } from 'preact/hooks';\n\nimport type { Panel } from '@src/components/panel';\nimport { EventDetailPopup } from '@src/components/popup/eventDetailPopup';\nimport { EventFormPopup } from '@src/components/popup/eventFormPopup';\nimport { PopupOverlay } from '@src/components/popup/popupOverlay';\nimport { SeeMoreEventsPopup } from '@src/components/popup/seeMoreEventsPopup';\nimport { useDispatch } from '@src/contexts/calendarStore';\nimport { LayoutContainerProvider } from '@src/contexts/layoutContainer';\nimport { useTheme } from '@src/contexts/themeStore';\nimport { cls, toPercent } from '@src/helpers/css';\nimport { useDOMNode } from '@src/hooks/common/useDOMNode';\nimport { commonThemeSelector } from '@src/selectors/theme';\nimport { noop } from '@src/utils/noop';\nimport { isNil, isNumber, isString } from '@src/utils/type';\n\nimport type { PropsWithChildren, StyleProp } from '@t/components/common';\n\ninterface Props {\n  height?: number;\n  width?: number;\n  className?: string;\n  autoAdjustPanels?: boolean;\n  children: ComponentChildren;\n}\n\nfunction getLayoutStylesFromInfo(width?: number, height?: number) {\n  const styles: StyleProp = { height: toPercent(100) };\n\n  if (width) {\n    styles.width = width;\n  }\n  if (height) {\n    styles.height = height;\n  }\n\n  return styles;\n}\n\n// TODO: consider `direction` and `resizeMode`\nexport function Layout({\n  children,\n  width,\n  height,\n  className = '',\n  autoAdjustPanels = false,\n}: PropsWithChildren<Props>) {\n  const { backgroundColor } = useTheme(commonThemeSelector);\n\n  const [container, containerRefCallback] = useDOMNode<HTMLDivElement>();\n  const { setLastPanelType, updateLayoutHeight } = useDispatch('weekViewLayout');\n\n  const layoutClassName = useMemo(() => `${cls('layout')} ${className}`, [className]);\n\n  useLayoutEffect(() => {\n    if (container) {\n      const onResizeWindow = () => updateLayoutHeight(container.offsetHeight);\n\n      onResizeWindow();\n      window.addEventListener('resize', onResizeWindow);\n\n      return () => window.removeEventListener('resize', onResizeWindow);\n    }\n\n    return noop;\n  }, [container, updateLayoutHeight]);\n\n  useLayoutEffect(() => {\n    if (container && autoAdjustPanels) {\n      const childArray = toChildArray(children);\n      const lastChild = childArray[childArray.length - 1];\n\n      if (!isString(lastChild) && !isNumber(lastChild) && !isNil(lastChild)) {\n        setLastPanelType((lastChild.props as unknown as ComponentProps<typeof Panel>).name);\n      }\n    }\n  }, [children, setLastPanelType, autoAdjustPanels, container]);\n\n  return (\n    <LayoutContainerProvider value={container}>\n      <div\n        ref={containerRefCallback}\n        className={layoutClassName}\n        style={{ ...getLayoutStylesFromInfo(width, height), backgroundColor }}\n      >\n        {container ? children : null}\n      </div>\n      <EventFormPopup />\n      {/* <EventDetailPopup /> */}\n      <SeeMoreEventsPopup />\n      <PopupOverlay />\n    </LayoutContainerProvider>\n  );\n}\n"],"names":[],"sourceRoot":""}