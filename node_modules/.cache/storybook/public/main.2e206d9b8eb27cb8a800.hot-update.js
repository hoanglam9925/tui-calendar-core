"use strict";
self["webpackHotUpdate_toast_ui_calendar"]("main",{

/***/ "./src/factory/calendarCore.tsx":
/*!**************************************!*\
  !*** ./src/factory/calendarCore.tsx ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ CalendarCore; }
/* harmony export */ });
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/core-js/modules/es.symbol.js */ "../../node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/core-js/modules/es.symbol.description.js */ "../../node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../node_modules/core-js/modules/es.object.to-string.js */ "../../node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../node_modules/core-js/modules/es.symbol.iterator.js */ "../../node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../node_modules/core-js/modules/es.string.iterator.js */ "../../node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../node_modules/core-js/modules/es.array.iterator.js */ "../../node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../node_modules/core-js/modules/web.dom-collections.iterator.js */ "../../node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../node_modules/core-js/modules/es.array.slice.js */ "../../node_modules/core-js/modules/es.array.slice.js");
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../node_modules/core-js/modules/es.function.name.js */ "../../node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../node_modules/core-js/modules/es.array.from.js */ "../../node_modules/core-js/modules/es.array.from.js");
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../node_modules/core-js/modules/es.object.keys.js */ "../../node_modules/core-js/modules/es.object.keys.js");
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_array_find_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../node_modules/core-js/modules/es.array.find.js */ "../../node_modules/core-js/modules/es.array.find.js");
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_array_find_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_array_find_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_object_assign_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../node_modules/core-js/modules/es.object.assign.js */ "../../node_modules/core-js/modules/es.object.assign.js");
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_object_assign_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_object_assign_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../node_modules/core-js/modules/es.array.concat.js */ "../../node_modules/core-js/modules/es.array.concat.js");
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var preact__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! preact */ "../../node_modules/preact/dist/preact.module.js");
/* harmony import */ var preact_compat__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! preact/compat */ "../../node_modules/preact/compat/dist/compat.module.js");
/* harmony import */ var preact_render_to_string__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! preact-render-to-string */ "../../node_modules/preact-render-to-string/dist/index.mjs");
/* harmony import */ var tui_code_snippet_request_sendHostname__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! tui-code-snippet/request/sendHostname */ "../../node_modules/tui-code-snippet/request/sendHostname.js");
/* harmony import */ var tui_code_snippet_request_sendHostname__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(tui_code_snippet_request_sendHostname__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var _src_calendarContainer__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @src/calendarContainer */ "./src/calendarContainer.tsx");
/* harmony import */ var _src_constants_statistics__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @src/constants/statistics */ "./src/constants/statistics.ts");
/* harmony import */ var _src_contexts_calendarStore__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @src/contexts/calendarStore */ "./src/contexts/calendarStore.ts");
/* harmony import */ var _src_contexts_themeStore__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @src/contexts/themeStore */ "./src/contexts/themeStore.tsx");
/* harmony import */ var _src_helpers_grid__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @src/helpers/grid */ "./src/helpers/grid.ts");
/* harmony import */ var _src_model_eventModel__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @src/model/eventModel */ "./src/model/eventModel.ts");
/* harmony import */ var _src_time_date__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @src/time/date */ "./src/time/date.ts");
/* harmony import */ var _src_time_datetime__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @src/time/datetime */ "./src/time/datetime.ts");
/* harmony import */ var _src_utils_array__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @src/utils/array */ "./src/utils/array.ts");
/* harmony import */ var _src_utils_eventBus__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @src/utils/eventBus */ "./src/utils/eventBus.ts");
/* harmony import */ var _src_utils_sanitizer__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @src/utils/sanitizer */ "./src/utils/sanitizer.ts");
/* harmony import */ var _src_utils_type__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @src/utils/type */ "../../node_modules/tui-code-snippet/type/isString.js");
/* harmony import */ var _src_utils_type__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(_src_utils_type__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var _src_utils_type__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @src/utils/type */ "./src/utils/type.ts");











var _excluded = ["dispatch"],
    _excluded2 = ["theme", "template"];

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }





function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }


















/**
 * {@link https://nhn.github.io/tui.code-snippet/latest/CustomEvents CustomEvents} document at {@link https://github.com/nhn/tui.code-snippet tui-code-snippet}
 * @typedef {CustomEvents} CustomEvents
 */

/**
 * Define Calendars to group events.
 *
 * @typedef {object} CalendarInfo
 * @property {string} id - Calendar id.
 * @property {string} name - Calendar name.
 * @property {string} color - Text color of events.
 * @property {string} borderColor - Left border color of events.
 * @property {string} backgroundColor - Background color of events.
 * @property {string} dragBackgroundColor - Background color of events during dragging.
 */

/**
 * Timezone options of the calendar instance.
 *
 * For more information, see {@link https://github.com/nhn/tui.calendar/blob/main/docs/en/apis/options.md#timezone|Timezone options} in guide.
 *
 * @typedef {object} TimezoneOptions
 * @example
 * const calendar = new Calendar('#container', {
 *   timezone: {
 *     // @property {string} zones[].timezoneName - Timezone name. it should be one of IANA timezone names.
 *     // @property {string} [zones[].displayLabel] - Display label of timezone.
 *     // @property {string} [zones[].tooltip] - Tooltip of the element of the display label.
 *     zones: [
 *       {
 *         timezoneName: 'Asia/Seoul',
 *         displayLabel: 'UTC+9:00',
 *         tooltip: 'Seoul'
 *       },
 *       {
 *         timezoneName: 'Europe/London',
 *         displayLabel: 'UTC+1:00',
 *         tooltip: 'BST'
 *       }
 *     ],
 *     // This function will be called for rendering components for each timezone.
 *     // You don't have to use it if you're able to `Intl.DateTimeFormat` API with `timeZone` option.
 *     // this function should return timezone offset from UTC.
 *     // for instance, using moment-timezone:
 *     customOffsetCalculator: (timezoneName, timestamp) => {
 *       return moment.tz(timezoneName).utcOffset(timestamp);
 *     }
 *   }
 * });
 * @property {Array.<object>} zones - Timezone data.
 * @property {string} zones[].timezoneName - Timezone name. it should be one of IANA timezone names.
 * @property {string} [zones[].displayLabel] - Display label of timezone.
 * @property {string} [zones[].tooltip] - Tooltip of the element of the display label.
 * @property {function} customOffsetCalculator - Custom offset calculator when you're not able to leverage `Intl.DateTimeFormat` API.
 */

/**
 * Object to create/modify events.
 * @typedef {object} EventObject
 * @property {string} [id] - Event id.
 * @property {string} [calendarId] - Calendar id.
 * @property {string} [title] - Event title.
 * @property {string} [body] - Body content of the event.
 * @property {string} [isAllday] - Whether the event is all day or not.
 * @property {string|number|Date|TZDate} [start] - Start time of the event.
 * @property {string|number|Date|TZDate} [end] - End time of the event.
 * @property {number} [goingDuration] - Travel time which is taken to go in minutes.
 * @property {number} [comingDuration] - Travel time which is taken to come back in minutes.
 * @property {string} [location] - Location of the event.
 * @property {Array.<string>} [attendees] - Attendees of the event.
 * @property {string} [category] - Category of the event. Available categories are 'milestone', 'task', 'time' and 'allday'.
 * @property {string} [dueDateClass] - Classification of work events. (before work, before lunch, before work)
 * @property {string} [recurrenceRule] - Recurrence rule of the event.
 * @property {string} [state] - State of the event. Available states are 'Busy', 'Free'.
 * @property {boolean} [isVisible] - Whether the event is visible or not.
 * @property {boolean} [isPending] - Whether the event is pending or not.
 * @property {boolean} [isFocused] - Whether the event is focused or not.
 * @property {boolean} [isReadOnly] - Whether the event is read only or not.
 * @property {boolean} [isPrivate] - Whether the event is private or not.
 * @property {string} [color] - Text color of the event.
 * @property {string} [backgroundColor] - Background color of the event.
 * @property {string} [dragBackgroundColor] - Background color of the event during dragging.
 * @property {string} [borderColor] - Left border color of the event.
 * @property {object} [customStyle] - Custom style of the event. The key of CSS property should be camelCase (e.g. {'fontSize': '12px'})
 * @property {*} [raw] - Raw data of the event. it's an arbitrary property for anything.
 */

/**
 * CalendarCore class
 *
 * @class CalendarCore
 * @mixes CustomEvents
 * @param {string|Element} container - container element or selector.
 * @param {object} options - calendar options. For more information, see {@link https://github.com/nhn/tui.calendar/blob/main/docs/en/apis/calendar.md|Calendar options} in guide.
 *   @param {string} [options.defaultView="week"] - Initial view type. Available values are: 'day', 'week', 'month'.
 *   @param {boolean} [options.useFormPopup=false] - Whether to use the default form popup when creating/modifying events.
 *   @param {boolean} [options.useDetailPopup=false] - Whether to use the default detail popup when clicking events.
 *   @param {boolean} [options.isReadOnly=false] - Whether the calendar is read-only.
 *   @param {boolean} [options.usageStatistics=true] - Whether to allow collect hostname and send the information to google analytics.
 *                                              For more information, check out the {@link https://github.com/nhn/tui.calendar/blob/main/apps/calendar/README.md#collect-statistics-on-the-use-of-open-source|documentation}.
 *   @param {function} [options.eventFilter] - A function that returns true if the event should be displayed. The default filter checks if the event's `isVisible` property is true.
 *   @param {object} [options.week] - Week option of the calendar instance.
 *     @param {number} [options.week.startDayOfWeek=0] - Start day of the week. Available values are 0 (Sunday) to 6 (Saturday).
 *     @param {Array.<string>} [options.week.dayNames] - Names of days of the week. Should be 7 items starting from Sunday to Saturday. If not specified, the default names are used.
 *                                               Default values are ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].
 *     @param {boolean} [options.week.workweek=false] - Whether to exclude Saturday and Sunday.
 *     @param {boolean} [options.week.showTimezoneCollapseButton=true] - Whether to show the timezone collapse button.
 *     @param {boolean} [options.week.timezonesCollapsed=false] - Whether to collapse the timezones.
 *     @param {number} [options.week.hourStart=0] - Start hour of the day. Available values are 0 to 24.
 *     @param {number} [options.week.hourEnd=24] - End hour of the day. Available values are 0 to 24. Must be greater than `hourStart`.
 *     @param {boolean} [options.week.narrowWeekend=false] - Whether to narrow down width of weekends to half.
 *     @param {boolean|Array.<string>} [options.week.eventView=true] - Determine which view to display events. Available values are 'allday' and 'time'. set to `false` to disable event view.
 *     @param {boolean|Array.<string>} [options.week.taskView=true] - Determine which view to display tasks. Available values are 'milestone' and 'task'. set to `false` to disable task view.
 *     @param {boolean|object} [options.week.collapseDuplicateEvents=false] - Whether to collapse duplicate events. If you want to filter duplicate events and choose the main event based on your requirements, set `getDuplicateEvents` and `getMainEvent`. For more information, see {@link https://github.com/nhn/tui.calendar/blob/main/docs/en/apis/options.md#weekcollapseduplicateevents|Options} in guide.
 *   @param {object} options.month - Month option of the calendar instance.
 *     @param {number} [options.month.startDayOfWeek=0] - Start day of the week. Available values are 0 (Sunday) to 6 (Saturday).
 *     @param {Array.<string>} [options.month.dayNames] - Names of days of the week. Should be 7 items starting from Sunday to Saturday. If not specified, the default names are used.
 *                                                Default values are ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].
 *     @param {boolean} [options.month.workweek=false] - Whether to exclude Saturday and Sunday.
 *     @param {boolean} [options.month.narrowWeekend=false] - Whether to narrow down width of weekends to half.
 *     @param {number} [options.month.visibleWeeksCount=0] - Number of weeks to display. 0 means display all weeks.
 *   @param {Array.<CalendarInfo>} [options.calendars] - Calendars to group events.
 *   @param {boolean|object} [options.gridSelection=true] - Whether to enable grid selection. or it's option. it's enabled when the value is `true` and object and will be disabled when `isReadOnly` is true.
 *     @param {boolean} options.gridSelection.enableDbClick - Whether to enable double click to select area.
 *     @param {boolean} options.gridSelection.enableClick - Whether to enable click to select area.
 *   @param {TimezoneOptions} options.timezone - Timezone option of the calendar instance. For more information about timezone, check out the {@link https://github.com/nhn/tui.calendar/blob/main/docs/en/apis/options.md|Options} in guide.
 *   @param {Theme} options.theme - Theme option of the calendar instance. For more information, see {@link https://github.com/nhn/tui.calendar/blob/main/docs/en/apis/theme.md|Theme} in guide.
 *   @param {TemplateConfig} options.template - Template option of the calendar instance. For more information, see {@link https://github.com/nhn/tui.calendar/blob/main/docs/en/apis/template.md|Template} in guide.
 */
var CalendarCore = /*#__PURE__*/function () {
  /**
   * start and end date of weekly, monthly
   * @private
   */
  function CalendarCore(container) {
    var _document$querySelect, _document;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, CalendarCore);

    this.container = void 0;
    this.renderRange = void 0;
    this.eventBus = void 0;
    this.theme = void 0;
    this.store = void 0;
    // NOTE: Handling server side rendering. When container is not specified,
    this.container = _src_utils_type__WEBPACK_IMPORTED_MODULE_18___default()(container) ? (_document$querySelect = (_document = document) === null || _document === void 0 ? void 0 : _document.querySelector(container)) !== null && _document$querySelect !== void 0 ? _document$querySelect : null : container;
    this.theme = (0,_src_contexts_themeStore__WEBPACK_IMPORTED_MODULE_19__.initThemeStore)(options.theme);
    this.eventBus = new _src_utils_eventBus__WEBPACK_IMPORTED_MODULE_20__.EventBusImpl();
    this.store = (0,_src_contexts_calendarStore__WEBPACK_IMPORTED_MODULE_21__.initCalendarStore)(options);
    this.renderRange = this.calculateRenderRange((0,_src_time_datetime__WEBPACK_IMPORTED_MODULE_22__.toStartOfDay)());
    (0,_src_utils_sanitizer__WEBPACK_IMPORTED_MODULE_23__.addAttributeHooks)(); // NOTE: To make sure the user really wants to do this. Ignore any invalid values.

    if (this.getStoreState().options.usageStatistics === true) {
      tui_code_snippet_request_sendHostname__WEBPACK_IMPORTED_MODULE_17___default()('calendar', _src_constants_statistics__WEBPACK_IMPORTED_MODULE_24__.GA_TRACKING_ID);
    }
  }

  _createClass(CalendarCore, [{
    key: "getStoreState",
    value: function getStoreState(group) {
      var state = this.store.getState();
      return group ? state[group] : state;
    }
  }, {
    key: "getStoreDispatchers",
    value: function getStoreDispatchers(group) {
      var dispatchers = this.store.getState().dispatch;
      return group ? dispatchers[group] : dispatchers;
    }
    /**
     * Destroys the instance.
     */

  }, {
    key: "destroy",
    value: function destroy() {
      if (this.container) {
        (0,preact_compat__WEBPACK_IMPORTED_MODULE_15__.unmountComponentAtNode)(this.container);
      }

      this.store.clearListeners();
      this.theme.clearListeners();
      this.eventBus.off();
      (0,_src_utils_sanitizer__WEBPACK_IMPORTED_MODULE_23__.removeAttributeHooks)();

      for (var key in this) {
        if (this.hasOwnProperty(key)) {
          delete this[key];
        }
      }
    }
  }, {
    key: "calculateMonthRenderDate",
    value: function calculateMonthRenderDate(_ref) {
      var renderDate = _ref.renderDate,
          offset = _ref.offset,
          monthOptions = _ref.monthOptions;
      var newRenderDate = new _src_time_date__WEBPACK_IMPORTED_MODULE_25__["default"](renderDate);
      var visibleWeeksCount = monthOptions.visibleWeeksCount;

      if (visibleWeeksCount > 0) {
        newRenderDate = (0,_src_time_datetime__WEBPACK_IMPORTED_MODULE_22__.addDate)(newRenderDate, offset * 7 * visibleWeeksCount);
      } else {
        newRenderDate = (0,_src_time_datetime__WEBPACK_IMPORTED_MODULE_22__.addMonths)(newRenderDate, offset);
      }

      var dateMatrix = (0,_src_helpers_grid__WEBPACK_IMPORTED_MODULE_26__.createDateMatrixOfMonth)(newRenderDate, monthOptions);

      var _dateMatrix = _slicedToArray(dateMatrix, 1),
          _dateMatrix$ = _slicedToArray(_dateMatrix[0], 1),
          start = _dateMatrix$[0];

      var end = (0,_src_utils_array__WEBPACK_IMPORTED_MODULE_27__.last)((0,_src_utils_array__WEBPACK_IMPORTED_MODULE_27__.last)(dateMatrix));
      return {
        renderDate: newRenderDate,
        renderRange: {
          start: start,
          end: end
        }
      };
    }
  }, {
    key: "calculateWeekRenderDate",
    value: function calculateWeekRenderDate(_ref2) {
      var renderDate = _ref2.renderDate,
          offset = _ref2.offset,
          weekOptions = _ref2.weekOptions;
      var newRenderDate = new _src_time_date__WEBPACK_IMPORTED_MODULE_25__["default"](renderDate);
      newRenderDate.addDate(offset * 7);
      var weekDates = (0,_src_helpers_grid__WEBPACK_IMPORTED_MODULE_26__.getWeekDates)(newRenderDate, weekOptions);

      var _weekDates = _slicedToArray(weekDates, 1),
          start = _weekDates[0];

      var end = (0,_src_utils_array__WEBPACK_IMPORTED_MODULE_27__.last)(weekDates);
      return {
        renderDate: newRenderDate,
        renderRange: {
          start: start,
          end: end
        }
      };
    }
  }, {
    key: "calculateDayRenderDate",
    value: function calculateDayRenderDate(_ref3) {
      var renderDate = _ref3.renderDate,
          offset = _ref3.offset;
      var newRenderDate = new _src_time_date__WEBPACK_IMPORTED_MODULE_25__["default"](renderDate);
      newRenderDate.addDate(offset);
      var start = (0,_src_time_datetime__WEBPACK_IMPORTED_MODULE_22__.toStartOfDay)(newRenderDate);
      var end = (0,_src_time_datetime__WEBPACK_IMPORTED_MODULE_22__.toEndOfDay)(newRenderDate);
      return {
        renderDate: newRenderDate,
        renderRange: {
          start: start,
          end: end
        }
      };
    }
    /**
     * Move the rendered date to the next/prev range.
     *
     * The range of movement differs depending on the current view, Basically:
     *   - In month view, it moves to the next/prev month.
     *   - In week view, it moves to the next/prev week.
     *   - In day view, it moves to the next/prev day.
     *
     * Also, the range depends on the options like how many visible weeks/months should be rendered.
     *
     * @param {number} offset The offset to move by.
     *
     * @example
     * // Move to the next month in month view.
     * calendar.move(1);
     *
     * // Move to the next year in month view.
     * calendar.move(12);
     *
     * // Move to yesterday in day view.
     * calendar.move(-1);
     */

  }, {
    key: "move",
    value: function move(offset) {
      if ((0,_src_utils_type__WEBPACK_IMPORTED_MODULE_28__.isNil)(offset)) {
        return;
      }

      var _this$getStoreState$v = this.getStoreState().view,
          currentView = _this$getStoreState$v.currentView,
          renderDate = _this$getStoreState$v.renderDate;

      var _this$getStoreState = this.getStoreState(),
          options = _this$getStoreState.options;

      var setRenderDate = this.getStoreDispatchers().view.setRenderDate;
      var newRenderDate = new _src_time_date__WEBPACK_IMPORTED_MODULE_25__["default"](renderDate);
      var calculatedRenderDate = {
        renderDate: newRenderDate,
        renderRange: {
          start: new _src_time_date__WEBPACK_IMPORTED_MODULE_25__["default"](newRenderDate),
          end: new _src_time_date__WEBPACK_IMPORTED_MODULE_25__["default"](newRenderDate)
        }
      };

      if (currentView === 'month') {
        calculatedRenderDate = this.calculateMonthRenderDate({
          renderDate: renderDate,
          offset: offset,
          monthOptions: options.month
        });
      } else if (currentView === 'week') {
        calculatedRenderDate = this.calculateWeekRenderDate({
          renderDate: renderDate,
          offset: offset,
          weekOptions: options.week
        });
      } else if (currentView === 'day') {
        calculatedRenderDate = this.calculateDayRenderDate({
          renderDate: renderDate,
          offset: offset
        });
      }

      setRenderDate(calculatedRenderDate.renderDate);
      this.renderRange = calculatedRenderDate.renderRange;
    }
    /**********
     * CRUD Methods
     **********/

    /**
     * Create events and render calendar.
     * @param {Array.<EventObject>} events - list of {@link EventObject}
     * @example
     * calendar.createEvents([
     *   {
     *     id: '1',
     *     calendarId: '1',
     *     title: 'my event',
     *     category: 'time',
     *     dueDateClass: '',
     *     start: '2018-01-18T22:30:00+09:00',
     *     end: '2018-01-19T02:30:00+09:00',
     *   },
     *   {
     *     id: '2',
     *     calendarId: '1',
     *     title: 'second event',
     *     category: 'time',
     *     dueDateClass: '',
     *     start: '2018-01-18T17:30:00+09:00',
     *     end: '2018-01-19T17:31:00+09:00',
     *   },
     * ]);
     */

  }, {
    key: "createEvents",
    value: function createEvents(events) {
      var _this$getStoreDispatc = this.getStoreDispatchers('calendar'),
          createEvents = _this$getStoreDispatc.createEvents;

      createEvents(events);
    }
  }, {
    key: "getEventModel",
    value: function getEventModel(eventId, calendarId) {
      var _this$getStoreState2 = this.getStoreState('calendar'),
          events = _this$getStoreState2.events;

      return events.find(function (_ref4) {
        var id = _ref4.id,
            eventCalendarId = _ref4.calendarId;
        return id === eventId && eventCalendarId === calendarId;
      });
    }
    /**
     * Get an {@link EventObject} with event's id and calendar's id.
     *
     * @param {string} eventId - event's id
     * @param {string} calendarId - calendar's id of the event
     * @returns {EventObject|null} event. If the event can't be found, it returns null.
     *
     * @example
     * const event = calendar.getEvent(eventId, calendarId);
     *
     * console.log(event.title);
     */

  }, {
    key: "getEvent",
    value: function getEvent(eventId, calendarId) {
      var _this$getEventModel$t, _this$getEventModel;

      return (_this$getEventModel$t = (_this$getEventModel = this.getEventModel(eventId, calendarId)) === null || _this$getEventModel === void 0 ? void 0 : _this$getEventModel.toEventObject()) !== null && _this$getEventModel$t !== void 0 ? _this$getEventModel$t : null;
    }
    /**
     * Update an event.
     *
     * @param {string} eventId - ID of an event to update
     * @param {string} calendarId - The calendarId of the event to update
     * @param {EventObject} changes - The new {@link EventObject} data to apply to the event
     *
     * @example
     * calendar.on('beforeUpdateEvent', function ({ event, changes }) {
     *   const { id, calendarId } = event;
     *
     *   calendar.updateEvent(id, calendarId, changes);
     * });
     */

  }, {
    key: "updateEvent",
    value: function updateEvent(eventId, calendarId, changes) {
      var _this$getStoreDispatc2 = this.getStoreDispatchers('calendar'),
          updateEvent = _this$getStoreDispatc2.updateEvent;

      var event = this.getEventModel(eventId, calendarId);

      if (event) {
        updateEvent({
          event: event,
          eventData: changes
        });
      }
    }
    /**
     * Delete an event.
     *
     * @param {string} eventId - event's id to delete
     * @param {string} calendarId - The CalendarId of the event to delete
     */

  }, {
    key: "deleteEvent",
    value: function deleteEvent(eventId, calendarId) {
      var _this$getStoreDispatc3 = this.getStoreDispatchers('calendar'),
          deleteEvent = _this$getStoreDispatc3.deleteEvent;

      var event = this.getEventModel(eventId, calendarId);

      if (event) {
        deleteEvent(event);
      }
    }
    /**********
     * General Methods
     **********/

    /**
     * Set events' visibility by calendar ID
     *
     * @param {string|Array.<string>} calendarId - The calendar id or ids to change visibility
     * @param {boolean} isVisible - If set to true, show the events. If set to false, hide the events.
     */

  }, {
    key: "setCalendarVisibility",
    value: function setCalendarVisibility(calendarId, isVisible) {
      var _this$getStoreDispatc4 = this.getStoreDispatchers('calendar'),
          setCalendarVisibility = _this$getStoreDispatc4.setCalendarVisibility;

      var calendarIds = Array.isArray(calendarId) ? calendarId : [calendarId];
      setCalendarVisibility(calendarIds, isVisible);
    }
    /**
     * Render the calendar.
     *
     * @example
     * calendar.render();
     *
     * @example
     * // Re-render the calendar when resizing a window.
     * window.addEventListener('resize', () => {
     *   calendar.render();
     * });
     */

  }, {
    key: "render",
    value: function render() {
      if ((0,_src_utils_type__WEBPACK_IMPORTED_MODULE_28__.isPresent)(this.container)) {
        (0,preact__WEBPACK_IMPORTED_MODULE_14__.render)((0,preact__WEBPACK_IMPORTED_MODULE_14__.h)(_src_calendarContainer__WEBPACK_IMPORTED_MODULE_29__.CalendarContainer, {
          theme: this.theme,
          store: this.store,
          eventBus: this.eventBus
        }, this.getComponent()), this.container);
      }

      return this;
    }
    /**
     * For SSR(Server Side Rendering), Return the HTML string of the whole calendar.
     *
     * @returns {string} HTML string
     */

  }, {
    key: "renderToString",
    value: function renderToString() {
      return (0,preact_render_to_string__WEBPACK_IMPORTED_MODULE_16__["default"])((0,preact__WEBPACK_IMPORTED_MODULE_14__.h)(_src_calendarContainer__WEBPACK_IMPORTED_MODULE_29__.CalendarContainer, {
        theme: this.theme,
        store: this.store,
        eventBus: this.eventBus
      }, this.getComponent()));
    }
    /**
     * Delete all events and clear view
     *
     * @example
     * calendar.clear();
     */

  }, {
    key: "clear",
    value: function clear() {
      var _this$getStoreDispatc5 = this.getStoreDispatchers('calendar'),
          clearEvents = _this$getStoreDispatc5.clearEvents;

      clearEvents();
    }
    /**
     * Scroll to current time on today in case of daily, weekly view.
     * Nothing happens in the monthly view.
     *
     * @example
     * function onNewEvents(events) {
     *   calendar.createEvents(events);
     *   calendar.scrollToNow('smooth');
     * }
     */

  }, {
    key: "scrollToNow",
    value: function scrollToNow() {
      var scrollBehavior = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'auto';
      this.eventBus.fire('scrollToNow', scrollBehavior);
    }
  }, {
    key: "calculateRenderRange",
    value: function calculateRenderRange(renderDate) {
      var currentView = this.getStoreState().view.currentView;

      var _this$getStoreState3 = this.getStoreState(),
          options = _this$getStoreState3.options;

      var newRenderDate = new _src_time_date__WEBPACK_IMPORTED_MODULE_25__["default"](renderDate);
      var newRenderRange = {
        start: new _src_time_date__WEBPACK_IMPORTED_MODULE_25__["default"](newRenderDate),
        end: new _src_time_date__WEBPACK_IMPORTED_MODULE_25__["default"](newRenderDate)
      };

      if (currentView === 'month') {
        newRenderRange = this.calculateMonthRenderDate({
          renderDate: renderDate,
          offset: 0,
          monthOptions: options.month
        }).renderRange;
      } else if (currentView === 'week') {
        newRenderRange = this.calculateWeekRenderDate({
          renderDate: renderDate,
          offset: 0,
          weekOptions: options.week
        }).renderRange;
      } else if (currentView === 'day') {
        newRenderRange = this.calculateDayRenderDate({
          renderDate: renderDate,
          offset: 0
        }).renderRange;
      }

      return newRenderRange;
    }
    /**
     * Move to today.
     *
     * @example
     * function onClickTodayBtn() {
     *   calendar.today();
     * }
     */

  }, {
    key: "today",
    value: function today() {
      var setRenderDate = this.getStoreDispatchers().view.setRenderDate;
      var today = new _src_time_date__WEBPACK_IMPORTED_MODULE_25__["default"]();
      setRenderDate(today);
      this.renderRange = this.calculateRenderRange(today);
    }
    /**
     * Move to specific date.
     *
     * @param {Date|string|number|TZDate} date - The date to move. it should be eligible parameter to create a `Date` instance if `date` is string or number.
     * @example
     * calendar.on('clickDayName', (event) => {
     *   if (calendar.getViewName() === 'week') {
     *     const dateToMove = new Date(event.date);
     *
     *     calendar.setDate(dateToMove);
     *     calendar.changeView('day');
     *   }
     * });
     */

  }, {
    key: "setDate",
    value: function setDate(date) {
      var _this$getStoreDispatc6 = this.getStoreDispatchers('view'),
          setRenderDate = _this$getStoreDispatc6.setRenderDate;

      var dateToChange = new _src_time_date__WEBPACK_IMPORTED_MODULE_25__["default"](date);
      setRenderDate(dateToChange);
      this.renderRange = this.calculateRenderRange(dateToChange);
    }
    /**
     * Move the calendar forward to the next range.
     *
     * @example
     * function moveToNextOrPrevRange(offset) {
     *   if (offset === -1) {
     *     calendar.prev();
     *   } else if (offset === 1) {
     *     calendar.next();
     *   }
     * }
     */

  }, {
    key: "next",
    value: function next() {
      this.move(1);
    }
    /**
     * Move the calendar backward to the previous range.
     *
     * @example
     * function moveToNextOrPrevRange(offset) {
     *   if (offset === -1) {
     *     calendar.prev();
     *   } else if (offset === 1) {
     *     calendar.next();
     *   }
     * }
     */

  }, {
    key: "prev",
    value: function prev() {
      this.move(-1);
    }
    /**
     * Change color values of events belong to a certain calendar.
     *
     * @param {string} calendarId - The calendar ID
     * @param {object} colorOptions - The color values of the calendar
     *   @param {string} colorOptions.color - The text color of the events
     *   @param {string} colorOptions.borderColor - Left border color of events
     *   @param {string} colorOptions.backgroundColor - Background color of events
     *   @param {string} colorOptions.dragBackgroundColor - Background color of events during dragging
     *
     * @example
     * calendar.setCalendarColor('1', {
     *     color: '#e8e8e8',
     *     backgroundColor: '#585858',
     *     borderColor: '#a1b56c',
     *     dragBackgroundColor: '#585858',
     * });
     * calendar.setCalendarColor('2', {
     *     color: '#282828',
     *     backgroundColor: '#dc9656',
     *     borderColor: '#a1b56c',
     *     dragBackgroundColor: '#dc9656',
     * });
     * calendar.setCalendarColor('3', {
     *     color: '#a16946',
     *     backgroundColor: '#ab4642',
     *     borderColor: '#a1b56c',
     *     dragBackgroundColor: '#ab4642',
     * });
     */

  }, {
    key: "setCalendarColor",
    value: function setCalendarColor(calendarId, colorOptions) {
      var setCalendarColor = this.getStoreDispatchers().calendar.setCalendarColor;
      setCalendarColor(calendarId, colorOptions);
    }
    /**
     * Change current view type.
     *
     * @param {string} viewName - The new view name to change to. Available values are 'month', 'week', 'day'.
     *
     * @example
     * // change to daily view
     * calendar.changeView('day');
     *
     * // change to weekly view
     * calendar.changeView('week');
     *
     * // change to monthly view
     * calendar.changeView('month');
     */

  }, {
    key: "changeView",
    value: function changeView(viewName) {
      var _this$getStoreDispatc7 = this.getStoreDispatchers('view'),
          changeView = _this$getStoreDispatc7.changeView;

      changeView(viewName);
      this.renderRange = this.calculateRenderRange(this.getDate());
    }
    /**
     * Get the DOM element of the event by event id and calendar id
     *
     * @param {string} eventId - ID of event
     * @param {string} calendarId - calendarId of event
     * @returns {HTMLElement} event element if found or null
     *
     * @example
     * const element = calendar.getElement(eventId, calendarId);
     *
     * console.log(element);
     */

  }, {
    key: "getElement",
    value: function getElement(eventId, calendarId) {
      var event = this.getEvent(eventId, calendarId);

      if (event && this.container) {
        return this.container.querySelector("[data-event-id=\"" + eventId + "\"][data-calendar-id=\"" + calendarId + "\"]");
      }

      return null;
    }
    /**
     * Set the theme of the calendar.
     *
     * @param {Theme} theme - The theme object to apply. For more information, see {@link https://github.com/nhn/tui.calendar/blob/main/docs/en/apis/theme.md|Theme} in guide.
     *
     * @example
     * calendar.setTheme({
     *   common: {
     *     gridSelection: {
     *       backgroundColor: '#333',
     *     },
     *   },
     *   week: {
     *     nowIndicatorLabel: {
     *       color: '#00FF00',
     *     },
     *   },
     *   month: {
     *     dayName: {
     *       borderLeft: '1px solid #e5e5e5',
     *     },
     *   },
     * });
     */

  }, {
    key: "setTheme",
    value: function setTheme(theme) {
      var setTheme = this.theme.getState().dispatch.setTheme;
      setTheme(theme);
    }
    /**
     * Get current options.
     *
     * @returns {Options} - The current options of the instance
     */

  }, {
    key: "getOptions",
    value: function getOptions() {
      var _this$getStoreState4 = this.getStoreState(),
          options = _this$getStoreState4.options,
          template = _this$getStoreState4.template;

      var _this$theme$getState = this.theme.getState(),
          dispatch = _this$theme$getState.dispatch,
          theme = _objectWithoutProperties(_this$theme$getState, _excluded);

      return Object.assign({}, options, {
        template: template,
        theme: theme
      });
    }
    /**
     * Set options of calendar. For more information, see {@link https://github.com/nhn/tui.calendar/blob/main/docs/en/apis/options.md|Options} in guide.
     *
     * @param {Options} options - The options to set
     */

  }, {
    key: "setOptions",
    value: function setOptions(options) {
      // destructure options here for tui.doc to generate docs correctly
      var theme = options.theme,
          template = options.template,
          restOptions = _objectWithoutProperties(options, _excluded2);

      var setTheme = this.theme.getState().dispatch.setTheme;

      var _this$getStoreDispatc8 = this.getStoreDispatchers(),
          setOptions = _this$getStoreDispatc8.options.setOptions,
          setTemplate = _this$getStoreDispatc8.template.setTemplate;

      if ((0,_src_utils_type__WEBPACK_IMPORTED_MODULE_28__.isPresent)(theme)) {
        setTheme(theme);
      }

      if ((0,_src_utils_type__WEBPACK_IMPORTED_MODULE_28__.isPresent)(template)) {
        setTemplate(template);
      }

      setOptions(restOptions);
    }
    /**
     * Get current rendered date. (see {@link TZDate} for further information)
     *
     * @returns {TZDate}
     */

  }, {
    key: "getDate",
    value: function getDate() {
      var renderDate = this.getStoreState().view.renderDate;
      return renderDate;
    }
    /**
     * Start time of rendered date range. (see {@link TZDate} for further information)
     *
     * @returns {TZDate}
     */

  }, {
    key: "getDateRangeStart",
    value: function getDateRangeStart() {
      return this.renderRange.start;
    }
    /**
     * End time of rendered date range. (see {@link TZDate} for further information)
     *
     * @returns {TZDate}
     */

  }, {
    key: "getDateRangeEnd",
    value: function getDateRangeEnd() {
      return this.renderRange.end;
    }
    /**
     * Get current view name('day', 'week', 'month').
     *
     * @returns {string} current view name ('day', 'week', 'month')
     */

  }, {
    key: "getViewName",
    value: function getViewName() {
      var _this$getStoreState5 = this.getStoreState('view'),
          currentView = _this$getStoreState5.currentView;

      return currentView;
    }
    /**
     * Set calendar list.
     *
     * @param {CalendarInfo[]} calendars - list of calendars
     */

  }, {
    key: "setCalendars",
    value: function setCalendars(calendars) {
      var setCalendars = this.getStoreDispatchers().calendar.setCalendars;
      setCalendars(calendars);
    } // TODO: specify position of popup

    /**
     * Open event form popup with predefined form values.
     *
     * @param {EventObject} event - The predefined {@link EventObject} data to show in form.
     */

  }, {
    key: "openFormPopup",
    value: function openFormPopup(event) {
      var showFormPopup = this.getStoreDispatchers().popup.showFormPopup;
      var eventModel = new _src_model_eventModel__WEBPACK_IMPORTED_MODULE_30__["default"](event);
      var title = eventModel.title,
          location = eventModel.location,
          start = eventModel.start,
          end = eventModel.end,
          isAllday = eventModel.isAllday,
          isPrivate = eventModel.isPrivate,
          eventState = eventModel.state;
      showFormPopup({
        isCreationPopup: true,
        event: eventModel,
        title: title,
        location: location,
        start: start,
        end: end,
        isAllday: isAllday,
        isPrivate: isPrivate,
        eventState: eventState
      });
    }
  }, {
    key: "clearGridSelections",
    value: function clearGridSelections() {
      var clearAll = this.getStoreDispatchers().gridSelection.clearAll;
      clearAll();
    }
  }, {
    key: "fire",
    value: function fire(eventName) {
      var _this$eventBus;

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      (_this$eventBus = this.eventBus).fire.apply(_this$eventBus, [eventName].concat(args));

      return this;
    }
  }, {
    key: "off",
    value: function off(eventName, handler) {
      this.eventBus.off(eventName, handler);
      return this;
    }
  }, {
    key: "on",
    value: function on(eventName, handler) {
      this.eventBus.on(eventName, handler);
      return this;
    }
  }, {
    key: "once",
    value: function once(eventName, handler) {
      this.eventBus.once(eventName, handler);
      return this;
    }
  }]);

  return CalendarCore;
}();



/***/ })

});
//# sourceMappingURL=main.2e206d9b8eb27cb8a800.hot-update.js.map