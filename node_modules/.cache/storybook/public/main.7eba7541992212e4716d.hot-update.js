"use strict";
self["webpackHotUpdate_toast_ui_calendar"]("main",{

/***/ "./src/model/eventModel.ts":
/*!*********************************!*\
  !*** ./src/model/eventModel.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ EventModel; },
/* harmony export */   "isTimeEvent": function() { return /* binding */ isTimeEvent; }
/* harmony export */ });
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/core-js/modules/es.number.constructor.js */ "../../node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var _Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Users_hlam_Desktop_www_tui_calendar_node_modules_core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _src_helpers_events__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @src/helpers/events */ "./src/helpers/events.ts");
/* harmony import */ var _src_model_eventUIModel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @src/model/eventUIModel */ "./src/model/eventUIModel.ts");
/* harmony import */ var _src_time_date__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/time/date */ "./src/time/date.ts");
/* harmony import */ var _src_time_datetime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/time/datetime */ "./src/time/datetime.ts");
/* harmony import */ var _src_utils_stamp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/utils/stamp */ "./src/utils/stamp.ts");
/* harmony import */ var _src_utils_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/utils/type */ "../../node_modules/tui-code-snippet/type/isString.js");
/* harmony import */ var _src_utils_type__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_src_utils_type__WEBPACK_IMPORTED_MODULE_3__);


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }








var EventModel = /*#__PURE__*/function () {
  /**
   * whether the event includes multiple dates
   */
  function EventModel() {
    var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, EventModel);

    this.id = '';
    this.calendarId = '';
    this.title = '';
    this.body = '';
    this.isAllday = false;
    this.start = new _src_time_date__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.end = new _src_time_date__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.goingDuration = 0;
    this.comingDuration = 0;
    this.location = '';
    this.attendees = [];
    this.category = 'time';
    this.dueDateClass = '';
    this.recurrenceRule = '';
    this.state = 'Busy';
    this.isVisible = true;
    this.isPending = false;
    this.isFocused = false;
    this.isReadOnly = false;
    this.isPrivate = false;
    this.color = void 0;
    this.backgroundColor = void 0;
    this.dragBackgroundColor = void 0;
    this.borderColor = void 0;
    this.customStyle = {};
    this.raw = null;
    this.userData = void 0;
    this.hasMultiDates = false;
    // initialize model id
    (0,_src_utils_stamp__WEBPACK_IMPORTED_MODULE_2__.stamp)(this);
    this.init(event);
  }

  _createClass(EventModel, [{
    key: "init",
    value: function init() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$id = _ref.id,
          id = _ref$id === void 0 ? '' : _ref$id,
          _ref$calendarId = _ref.calendarId,
          calendarId = _ref$calendarId === void 0 ? '' : _ref$calendarId,
          _ref$title = _ref.title,
          title = _ref$title === void 0 ? '' : _ref$title,
          _ref$body = _ref.body,
          body = _ref$body === void 0 ? '' : _ref$body,
          _ref$isAllday = _ref.isAllday,
          isAllday = _ref$isAllday === void 0 ? false : _ref$isAllday,
          _ref$start = _ref.start,
          start = _ref$start === void 0 ? new _src_time_date__WEBPACK_IMPORTED_MODULE_1__["default"]() : _ref$start,
          _ref$end = _ref.end,
          end = _ref$end === void 0 ? new _src_time_date__WEBPACK_IMPORTED_MODULE_1__["default"]() : _ref$end,
          _ref$goingDuration = _ref.goingDuration,
          goingDuration = _ref$goingDuration === void 0 ? 0 : _ref$goingDuration,
          _ref$comingDuration = _ref.comingDuration,
          comingDuration = _ref$comingDuration === void 0 ? 0 : _ref$comingDuration,
          _ref$location = _ref.location,
          location = _ref$location === void 0 ? '' : _ref$location,
          _ref$attendees = _ref.attendees,
          attendees = _ref$attendees === void 0 ? [] : _ref$attendees,
          _ref$category = _ref.category,
          category = _ref$category === void 0 ? 'time' : _ref$category,
          _ref$dueDateClass = _ref.dueDateClass,
          dueDateClass = _ref$dueDateClass === void 0 ? '' : _ref$dueDateClass,
          _ref$recurrenceRule = _ref.recurrenceRule,
          recurrenceRule = _ref$recurrenceRule === void 0 ? '' : _ref$recurrenceRule,
          _ref$state = _ref.state,
          state = _ref$state === void 0 ? 'Busy' : _ref$state,
          _ref$isVisible = _ref.isVisible,
          isVisible = _ref$isVisible === void 0 ? true : _ref$isVisible,
          _ref$isPending = _ref.isPending,
          isPending = _ref$isPending === void 0 ? false : _ref$isPending,
          _ref$isFocused = _ref.isFocused,
          isFocused = _ref$isFocused === void 0 ? false : _ref$isFocused,
          _ref$isReadOnly = _ref.isReadOnly,
          isReadOnly = _ref$isReadOnly === void 0 ? false : _ref$isReadOnly,
          _ref$isPrivate = _ref.isPrivate,
          isPrivate = _ref$isPrivate === void 0 ? false : _ref$isPrivate,
          color = _ref.color,
          backgroundColor = _ref.backgroundColor,
          dragBackgroundColor = _ref.dragBackgroundColor,
          borderColor = _ref.borderColor,
          _ref$customStyle = _ref.customStyle,
          customStyle = _ref$customStyle === void 0 ? {} : _ref$customStyle,
          _ref$raw = _ref.raw,
          raw = _ref$raw === void 0 ? null : _ref$raw;

      this.id = id;
      this.calendarId = calendarId;
      this.title = title;
      this.body = body;
      this.isAllday = category === 'allday' ? true : isAllday;
      this.goingDuration = goingDuration;
      this.comingDuration = comingDuration;
      this.location = location;
      this.attendees = attendees;
      this.category = category;
      this.dueDateClass = dueDateClass;
      this.recurrenceRule = recurrenceRule;
      this.state = state;
      this.isVisible = isVisible;
      this.isPending = isPending;
      this.isFocused = isFocused;
      this.isReadOnly = isReadOnly;
      this.isPrivate = isPrivate;
      this.color = color;
      this.backgroundColor = backgroundColor;
      this.dragBackgroundColor = dragBackgroundColor;
      this.borderColor = borderColor;
      this.customStyle = customStyle;
      this.raw = raw;

      if (this.isAllday) {
        this.setAlldayPeriod(start, end);
      } else {
        this.setTimePeriod(start, end);
      }

      if (category === 'milestone' || category === 'task') {
        this.start = new _src_time_date__WEBPACK_IMPORTED_MODULE_1__["default"](this.end);
      }
    }
  }, {
    key: "setAlldayPeriod",
    value: function setAlldayPeriod(start, end) {
      // If it is an all-day, only the date information of the string is used.
      var startedAt;
      var endedAt;

      if (_src_utils_type__WEBPACK_IMPORTED_MODULE_3___default()(start)) {
        startedAt = (0,_src_time_datetime__WEBPACK_IMPORTED_MODULE_4__.parse)(start.substring(0, 10));
      } else {
        startedAt = new _src_time_date__WEBPACK_IMPORTED_MODULE_1__["default"](start || Date.now());
      }

      if (_src_utils_type__WEBPACK_IMPORTED_MODULE_3___default()(end)) {
        endedAt = (0,_src_time_datetime__WEBPACK_IMPORTED_MODULE_4__.parse)(end.substring(0, 10));
      } else {
        endedAt = new _src_time_date__WEBPACK_IMPORTED_MODULE_1__["default"](end || this.start);
      }

      this.start = startedAt;
      this.start.setHours(0, 0, 0);
      this.end = endedAt || new _src_time_date__WEBPACK_IMPORTED_MODULE_1__["default"](this.start);
      this.end.setHours(23, 59, 59);
    }
  }, {
    key: "setTimePeriod",
    value: function setTimePeriod(start, end) {
      this.start = new _src_time_date__WEBPACK_IMPORTED_MODULE_1__["default"](start || Date.now());
      this.end = new _src_time_date__WEBPACK_IMPORTED_MODULE_1__["default"](end || this.start);

      if (!end) {
        this.end.setMinutes(this.end.getMinutes() + 30);
      } // if over 24 hours


      this.hasMultiDates = this.end.getTime() - this.start.getTime() > _src_time_datetime__WEBPACK_IMPORTED_MODULE_4__.MS_PER_DAY;
    }
    /**
     * @returns {TZDate} render start date.
     */

  }, {
    key: "getStarts",
    value: function getStarts() {
      return this.start;
    }
    /**
     * @returns {TZDate} render end date.
     */

  }, {
    key: "getEnds",
    value: function getEnds() {
      return this.end;
    }
    /**
     * @returns {number} instance unique id.
     */

  }, {
    key: "cid",
    value: function cid() {
      return (0,_src_utils_stamp__WEBPACK_IMPORTED_MODULE_2__.stamp)(this);
    }
    /**
     * Check two  are equals (means title, isAllday, start, end are same)
     * @param {EventModel}  event model instance to compare.
     * @returns {boolean} Return false when not same.
     */
    // eslint-disable-next-line complexity

  }, {
    key: "equals",
    value: function equals(event) {
      if (this.id !== event.id) {
        return false;
      }

      if (this.title !== event.title) {
        return false;
      }

      if (this.body !== event.body) {
        return false;
      }

      if (this.isAllday !== event.isAllday) {
        return false;
      }

      if ((0,_src_time_datetime__WEBPACK_IMPORTED_MODULE_4__.compare)(this.getStarts(), event.getStarts()) !== 0) {
        return false;
      }

      if ((0,_src_time_datetime__WEBPACK_IMPORTED_MODULE_4__.compare)(this.getEnds(), event.getEnds()) !== 0) {
        return false;
      }

      if (this.color !== event.color) {
        return false;
      }

      if (this.backgroundColor !== event.backgroundColor) {
        return false;
      }

      if (this.dragBackgroundColor !== event.dragBackgroundColor) {
        return false;
      }

      if (this.borderColor !== event.borderColor) {
        return false;
      }

      return true;
    }
    /**
     * return duration between start and end.
     * @returns {number} duration milliseconds (UTC)
     */

  }, {
    key: "duration",
    value: function duration() {
      var start = Number(this.getStarts());
      var end = Number(this.getEnds());
      var duration;

      if (this.isAllday) {
        duration = Number((0,_src_time_datetime__WEBPACK_IMPORTED_MODULE_4__.toEndOfDay)(end)) - Number((0,_src_time_datetime__WEBPACK_IMPORTED_MODULE_4__.toStartOfDay)(start));
      } else {
        duration = end - start;
      }

      return duration;
    }
  }, {
    key: "valueOf",
    value: function valueOf() {
      return this;
    }
    /**
     * Returns true if the given EventModel coincides with the same time as the
     * calling EventModel.
     * @param {EventModel | EventUIModel} event The other event to compare with this EventModel.
     * @param {boolean = true} usingTravelTime When calculating collision, whether to calculate with travel time.
     * @returns {boolean} If the other event occurs within the same time as the first object.
     */

  }, {
    key: "collidesWith",
    value: function collidesWith(event) {
      var usingTravelTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      event = event instanceof _src_model_eventUIModel__WEBPACK_IMPORTED_MODULE_5__["default"] ? event.model : event;
      return (0,_src_helpers_events__WEBPACK_IMPORTED_MODULE_6__.collidesWith)({
        start: Number(this.getStarts()),
        end: Number(this.getEnds()),
        targetStart: Number(event.getStarts()),
        targetEnd: Number(event.getEnds()),
        goingDuration: this.goingDuration,
        comingDuration: this.comingDuration,
        targetGoingDuration: event.goingDuration,
        targetComingDuration: event.comingDuration,
        usingTravelTime: usingTravelTime // Daygrid does not use travelTime, TimeGrid uses travelTime.

      });
    }
  }, {
    key: "toEventObject",
    value: function toEventObject() {
      return {
        id: this.id,
        calendarId: this.calendarId,
        __cid: this.cid(),
        title: this.title,
        body: this.body,
        isAllday: this.isAllday,
        start: this.start,
        end: this.end,
        goingDuration: this.goingDuration,
        comingDuration: this.comingDuration,
        location: this.location,
        attendees: this.attendees,
        category: this.category,
        dueDateClass: this.dueDateClass,
        recurrenceRule: this.recurrenceRule,
        state: this.state,
        isVisible: this.isVisible,
        isPending: this.isPending,
        isFocused: this.isFocused,
        isReadOnly: this.isReadOnly,
        isPrivate: this.isPrivate,
        color: this.color,
        backgroundColor: this.backgroundColor,
        dragBackgroundColor: this.dragBackgroundColor,
        borderColor: this.borderColor,
        customStyle: this.customStyle,
        raw: this.raw
      };
    }
  }, {
    key: "getColors",
    value: function getColors() {
      return {
        color: this.color,
        backgroundColor: this.backgroundColor,
        dragBackgroundColor: this.dragBackgroundColor,
        borderColor: this.borderColor
      };
    }
  }]);

  return EventModel;
}(); // export function isBackgroundEvent({ model }: EventUIModel) {
//   return model.category === 'background';
// }


EventModel.schema = {
  required: ['title'],
  dateRange: ['start', 'end']
};

function isTimeEvent(_ref2) {
  var model = _ref2.model;
  var category = model.category,
      isAllday = model.isAllday,
      hasMultiDates = model.hasMultiDates;
  return category === 'time' && !isAllday && !hasMultiDates;
}

/***/ })

});
//# sourceMappingURL=main.7eba7541992212e4716d.hot-update.js.map