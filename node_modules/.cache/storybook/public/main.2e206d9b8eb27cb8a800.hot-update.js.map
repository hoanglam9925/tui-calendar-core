{"version":3,"file":"main.2e206d9b8eb27cb8a800.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAesources":["webpack://@toast-ui/calendar/./src/factory/calendarCore.tsx"],"sourcesContent":["import type { ComponentChild } from 'preact';\nimport { h, render } from 'preact';\nimport { unmountComponentAtNode } from 'preact/compat';\nimport renderToString from 'preact-render-to-string';\n\nimport type { DeepPartial } from 'ts-essentials';\nimport sendHostname from 'tui-code-snippet/request/sendHostname';\n\nimport { CalendarContainer } from '@src/calendarContainer';\nimport { GA_TRACKING_ID } from '@src/constants/statistics';\nimport { initCalendarStore } from '@src/contexts/calendarStore';\nimport { initThemeStore } from '@src/contexts/themeStore';\nimport { createDateMatrixOfMonth, getWeekDates } from '@src/helpers/grid';\nimport EventModel from '@src/model/eventModel';\nimport TZDate from '@src/time/date';\nimport { addDate, addMonths, toEndOfDay, toStartOfDay } from '@src/time/datetime';\nimport { last } from '@src/utils/array';\nimport type { EventBus } from '@src/utils/eventBus';\nimport { EventBusImpl } from '@src/utils/eventBus';\nimport { addAttributeHooks, removeAttributeHooks } from '@src/utils/sanitizer';\nimport { isNil, isPresent, isString } from '@src/utils/type';\n\nimport type { ExternalEventTypes, InternalEventTypes, ScrollBehaviorOptions } from '@t/eventBus';\nimport type { DateType, EventObject } from '@t/events';\nimport type { CalendarColor, CalendarInfo, Options, ViewType } from '@t/options';\nimport type {\n  CalendarMonthOptions,\n  CalendarState,\n  CalendarStore,\n  CalendarWeekOptions,\n  Dispatchers,\n  InternalStoreAPI,\n} from '@t/store';\nimport type { ThemeState, ThemeStore } from '@t/theme';\n\n/**\n * {@link https://nhn.github.io/tui.code-snippet/latest/CustomEvents CustomEvents} document at {@link https://github.com/nhn/tui.code-snippet tui-code-snippet}\n * @typedef {CustomEvents} CustomEvents\n */\n\n/**\n * Define Calendars to group events.\n *\n * @typedef {object} CalendarInfo\n * @property {string} id - Calendar id.\n * @property {string} name - Calendar name.\n * @property {string} color - Text color of events.\n * @property {string} borderColor - Left border color of events.\n * @property {string} backgroundColor - Background color of events.\n * @property {string} dragBackgroundColor - Background color of events during dragging.\n */\n\n/**\n * Timezone options of the calendar instance.\n *\n * For more information, see {@link https://github.com/nhn/tui.calendar/blob/main/docs/en/apis/options.md#timezone|Timezone options} in guide.\n *\n * @typedef {object} TimezoneOptions\n * @example\n * const calendar = new Calendar('#container', {\n *   timezone: {\n *     // @property {string} zones[].timezoneName - Timezone name. it should be one of IANA timezone names.\n *     // @property {string} [zones[].displayLabel] - Display label of timezone.\n *     // @property {string} [zones[].tooltip] - Tooltip of the element of the display label.\n *     zones: [\n *       {\n *         timezoneName: 'Asia/Seoul',\n *         displayLabel: 'UTC+9:00',\n *         tooltip: 'Seoul'\n *       },\n *       {\n *         timezoneName: 'Europe/London',\n *         displayLabel: 'UTC+1:00',\n *         tooltip: 'BST'\n *       }\n *     ],\n *     // This function will be called for rendering components for each timezone.\n *     // You don't have to use it if you're able to `Intl.DateTimeFormat` API with `timeZone` option.\n *     // this function should return timezone offset from UTC.\n *     // for instance, using moment-timezone:\n *     customOffsetCalculator: (timezoneName, timestamp) => {\n *       return moment.tz(timezoneName).utcOffset(timestamp);\n *     }\n *   }\n * });\n * @property {Array.<object>} zones - Timezone data.\n * @property {string} zones[].timezoneName - Timezone name. it should be one of IANA timezone names.\n * @property {string} [zones[].displayLabel] - Display label of timezone.\n * @property {string} [zones[].tooltip] - Tooltip of the element of the display label.\n * @property {function} customOffsetCalculator - Custom offset calculator when you're not able to leverage `Intl.DateTimeFormat` API.\n */\n\n/**\n * Object to create/modify events.\n * @typedef {object} EventObject\n * @property {string} [id] - Event id.\n * @property {string} [calendarId] - Calendar id.\n * @property {string} [title] - Event title.\n * @property {string} [body] - Body content of the event.\n * @property {string} [isAllday] - Whether the event is all day or not.\n * @property {string|number|Date|TZDate} [start] - Start time of the event.\n * @property {string|number|Date|TZDate} [end] - End time of the event.\n * @property {number} [goingDuration] - Travel time which is taken to go in minutes.\n * @property {number} [comingDuration] - Travel time which is taken to come back in minutes.\n * @property {string} [location] - Location of the event.\n * @property {Array.<string>} [attendees] - Attendees of the event.\n * @property {string} [category] - Category of the event. Available categories are 'milestone', 'task', 'time' and 'allday'.\n * @property {string} [dueDateClass] - Classification of work events. (before work, before lunch, before work)\n * @property {string} [recurrenceRule] - Recurrence rule of the event.\n * @property {string} [state] - State of the event. Available states are 'Busy', 'Free'.\n * @property {boolean} [isVisible] - Whether the event is visible or not.\n * @property {boolean} [isPending] - Whether the event is pending or not.\n * @property {boolean} [isFocused] - Whether the event is focused or not.\n * @property {boolean} [isReadOnly] - Whether the event is read only or not.\n * @property {boolean} [isPrivate] - Whether the event is private or not.\n * @property {string} [color] - Text color of the event.\n * @property {string} [backgroundColor] - Background color of the event.\n * @property {string} [dragBackgroundColor] - Background color of the event during dragging.\n * @property {string} [borderColor] - Left border color of the event.\n * @property {object} [customStyle] - Custom style of the event. The key of CSS property should be camelCase (e.g. {'fontSize': '12px'})\n * @property {*} [raw] - Raw data of the event. it's an arbitrary property for anything.\n */\n\n/**\n * CalendarCore class\n *\n * @class CalendarCore\n * @mixes CustomEvents\n * @param {string|Element} container - container element or selector.\n * @param {object} options - calendar options. For more information, see {@link https://github.com/nhn/tui.calendar/blob/main/docs/en/apis/calendar.md|Calendar options} in guide.\n *   @param {string} [options.defaultView=\"week\"] - Initial view type. Available values are: 'day', 'week', 'month'.\n *   @param {boolean} [options.useFormPopup=false] - Whether to use the default form popup when creating/modifying events.\n *   @param {boolean} [options.useDetailPopup=false] - Whether to use the default detail popup when clicking events.\n *   @param {boolean} [options.isReadOnly=false] - Whether the calendar is read-only.\n *   @param {boolean} [options.usageStatistics=true] - Whether to allow collect hostname and send the information to google analytics.\n *                                              For more information, check out the {@link https://github.com/nhn/tui.calendar/blob/main/apps/calendar/README.md#collect-statistics-on-the-use-of-open-source|documentation}.\n *   @param {function} [options.eventFilter] - A function that returns true if the event should be displayed. The default filter checks if the event's `isVisible` property is true.\n *   @param {object} [options.week] - Week option of the calendar instance.\n *     @param {number} [options.week.startDayOfWeek=0] - Start day of the week. Available values are 0 (Sunday) to 6 (Saturday).\n *     @param {Array.<string>} [options.week.dayNames] - Names of days of the week. Should be 7 items starting from Sunday to Saturday. If not specified, the default names are used.\n *                                               Default values are ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].\n *     @param {boolean} [options.week.workweek=false] - Whether to exclude Saturday and Sunday.\n *     @param {boolean} [options.week.showTimezoneCollapseButton=true] - Whether to show the timezone collapse button.\n *     @param {boolean} [options.week.timezonesCollapsed=false] - Whether to collapse the timezones.\n *     @param {number} [options.week.hourStart=0] - Start hour of the day. Available values are 0 to 24.\n *     @param {number} [options.week.hourEnd=24] - End hour of the day. Available values are 0 to 24. Must be greater than `hourStart`.\n *     @param {boolean} [options.week.narrowWeekend=false] - Whether to narrow down width of weekends to half.\n *     @param {boolean|Array.<string>} [options.week.eventView=true] - Determine which view to display events. Available values are 'allday' and 'time'. set to `false` to disable event view.\n *     @param {boolean|Array.<string>} [options.week.taskView=true] - Determine which view to display tasks. Available values are 'milestone' and 'task'. set to `false` to disable task view.\n *     @param {boolean|object} [options.week.collapseDuplicateEvents=false] - Whether to collapse duplicate events. If you want to filter duplicate events and choose the main event based on your requirements, set `getDuplicateEvents` and `getMainEvent`. For more information, see {@link https://github.com/nhn/tui.calendar/blob/main/docs/en/apis/options.md#weekcollapseduplicateevents|Options} in guide.\n *   @param {object} options.month - Month option of the calendar instance.\n *     @param {number} [options.month.startDayOfWeek=0] - Start day of the week. Available values are 0 (Sunday) to 6 (Saturday).\n *     @param {Array.<string>} [options.month.dayNames] - Names of days of the week. Should be 7 items starting from Sunday to Saturday. If not specified, the default names are used.\n *                                                Default values are ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].\n *     @param {boolean} [options.month.workweek=false] - Whether to exclude Saturday and Sunday.\n *     @param {boolean} [options.month.narrowWeekend=false] - Whether to narrow down width of weekends to half.\n *     @param {number} [options.month.visibleWeeksCount=0] - Number of weeks to display. 0 means display all weeks.\n *   @param {Array.<CalendarInfo>} [options.calendars] - Calendars to group events.\n *   @param {boolean|object} [options.gridSelection=true] - Whether to enable grid selection. or it's option. it's enabled when the value is `true` and object and will be disabled when `isReadOnly` is true.\n *     @param {boolean} options.gridSelection.enableDbClick - Whether to enable double click to select area.\n *     @param {boolean} options.gridSelection.enableClick - Whether to enable click to select area.\n *   @param {TimezoneOptions} options.timezone - Timezone option of the calendar instance. For more information about timezone, check out the {@link https://github.com/nhn/tui.calendar/blob/main/docs/en/apis/options.md|Options} in guide.\n *   @param {Theme} options.theme - Theme option of the calendar instance. For more information, see {@link https://github.com/nhn/tui.calendar/blob/main/docs/en/apis/theme.md|Theme} in guide.\n *   @param {TemplateConfig} options.template - Template option of the calendar instance. For more information, see {@link https://github.com/nhn/tui.calendar/blob/main/docs/en/apis/template.md|Template} in guide.\n */\nexport default abstract class CalendarCore\n  implements EventBus<ExternalEventTypes & InternalEventTypes>\n{\n  protected container: Element | null;\n\n  /**\n   * start and end date of weekly, monthly\n   * @private\n   */\n  protected renderRange: {\n    start: TZDate;\n    end: TZDate;\n  };\n\n  protected eventBus: EventBus<ExternalEventTypes & InternalEventTypes>;\n\n  protected theme: InternalStoreAPI<ThemeStore>;\n\n  protected store: InternalStoreAPI<CalendarStore>;\n\n  constructor(container: string | Element, options: Options = {}) {\n    // NOTE: Handling server side rendering. When container is not specified,\n    this.container = isString(container) ? document?.querySelector(container) ?? null : container;\n\n    this.theme = initThemeStore(options.theme);\n    this.eventBus = new EventBusImpl<ExternalEventTypes & InternalEventTypes>();\n    this.store = initCalendarStore(options);\n\n    this.renderRange = this.calculateRenderRange(toStartOfDay());\n\n    addAttributeHooks();\n\n    // NOTE: To make sure the user really wants to do this. Ignore any invalid values.\n    if (this.getStoreState().options.usageStatistics === true) {\n      sendHostname('calendar', GA_TRACKING_ID);\n    }\n  }\n\n  protected abstract getComponent(): ComponentChild;\n\n  protected getStoreState(): CalendarState;\n\n  protected getStoreState<Group extends keyof CalendarState>(group: Group): CalendarState[Group];\n\n  protected getStoreState<Group extends keyof CalendarState>(group?: Group) {\n    const state = this.store.getState();\n\n    return group ? state[group] : state;\n  }\n\n  protected getStoreDispatchers(): Dispatchers;\n\n  protected getStoreDispatchers<Group extends keyof Dispatchers>(group: Group): Dispatchers[Group];\n\n  protected getStoreDispatchers<Group extends keyof Dispatchers>(group?: Group) {\n    const dispatchers = this.store.getState().dispatch;\n\n    return group ? dispatchers[group] : dispatchers;\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy() {\n    if (this.container) {\n      unmountComponentAtNode(this.container);\n    }\n\n    this.store.clearListeners();\n    this.theme.clearListeners();\n    this.eventBus.off();\n    removeAttributeHooks();\n\n    for (const key in this) {\n      if (this.hasOwnProperty(key)) {\n        delete this[key];\n      }\n    }\n  }\n\n  private calculateMonthRenderDate({\n    renderDate,\n    offset,\n    monthOptions,\n  }: {\n    renderDate: TZDate;\n    offset: number;\n    monthOptions: CalendarMonthOptions;\n  }) {\n    let newRenderDate = new TZDate(renderDate);\n    const { visibleWeeksCount } = monthOptions;\n\n    if (visibleWeeksCount > 0) {\n      newRenderDate = addDate(newRenderDate, offset * 7 * visibleWeeksCount);\n    } else {\n      newRenderDate = addMonths(newRenderDate, offset);\n    }\n    const dateMatrix = createDateMatrixOfMonth(newRenderDate, monthOptions);\n\n    const [[start]] = dateMatrix;\n    const end = last(last(dateMatrix));\n\n    return {\n      renderDate: newRenderDate,\n      renderRange: { start, end },\n    };\n  }\n\n  private calculateWeekRenderDate({\n    renderDate,\n    offset,\n    weekOptions,\n  }: {\n    renderDate: TZDate;\n    offset: number;\n    weekOptions: CalendarWeekOptions;\n  }) {\n    const newRenderDate = new TZDate(renderDate);\n    newRenderDate.addDate(offset * 7);\n    const weekDates = getWeekDates(newRenderDate, weekOptions);\n\n    const [start] = weekDates;\n    const end = last(weekDates);\n\n    return {\n      renderDate: newRenderDate,\n      renderRange: { start, end },\n    };\n  }\n\n  private calculateDayRenderDate({ renderDate, offset }: { renderDate: TZDate; offset: number }) {\n    const newRenderDate = new TZDate(renderDate);\n    newRenderDate.addDate(offset);\n\n    const start = toStartOfDay(newRenderDate);\n    const end = toEndOfDay(newRenderDate);\n\n    return {\n      renderDate: newRenderDate,\n      renderRange: { start, end },\n    };\n  }\n\n  /**\n   * Move the rendered date to the next/prev range.\n   *\n   * The range of movement differs depending on the current view, Basically:\n   *   - In month view, it moves to the next/prev month.\n   *   - In week view, it moves to the next/prev week.\n   *   - In day view, it moves to the next/prev day.\n   *\n   * Also, the range depends on the options like how many visible weeks/months should be rendered.\n   *\n   * @param {number} offset The offset to move by.\n   *\n   * @example\n   * // Move to the next month in month view.\n   * calendar.move(1);\n   *\n   * // Move to the next year in month view.\n   * calendar.move(12);\n   *\n   * // Move to yesterday in day view.\n   * calendar.move(-1);\n   */\n  move(offset: number) {\n    if (isNil(offset)) {\n      return;\n    }\n\n    const { currentView, renderDate } = this.getStoreState().view;\n    const { options } = this.getStoreState();\n    const { setRenderDate } = this.getStoreDispatchers().view;\n\n    const newRenderDate = new TZDate(renderDate);\n\n    let calculatedRenderDate = {\n      renderDate: newRenderDate,\n      renderRange: { start: new TZDate(newRenderDate), end: new TZDate(newRenderDate) },\n    };\n\n    if (currentView === 'month') {\n      calculatedRenderDate = this.calculateMonthRenderDate({\n        renderDate,\n        offset,\n        monthOptions: options.month as CalendarMonthOptions,\n      });\n    } else if (currentView === 'week') {\n      calculatedRenderDate = this.calculateWeekRenderDate({\n        renderDate,\n        offset,\n        weekOptions: options.week as CalendarWeekOptions,\n      });\n    } else if (currentView === 'day') {\n      calculatedRenderDate = this.calculateDayRenderDate({ renderDate, offset });\n    }\n\n    setRenderDate(calculatedRenderDate.renderDate);\n    this.renderRange = calculatedRenderDate.renderRange;\n  }\n\n  /**********\n   * CRUD Methods\n   **********/\n\n  /**\n   * Create events and render calendar.\n   * @param {Array.<EventObject>} events - list of {@link EventObject}\n   * @example\n   * calendar.createEvents([\n   *   {\n   *     id: '1',\n   *     calendarId: '1',\n   *     title: 'my event',\n   *     category: 'time',\n   *     dueDateClass: '',\n   *     start: '2018-01-18T22:30:00+09:00',\n   *     end: '2018-01-19T02:30:00+09:00',\n   *   },\n   *   {\n   *     id: '2',\n   *     calendarId: '1',\n   *     title: 'second event',\n   *     category: 'time',\n   *     dueDateClass: '',\n   *     start: '2018-01-18T17:30:00+09:00',\n   *     end: '2018-01-19T17:31:00+09:00',\n   *   },\n   * ]);\n   */\n  createEvents(events: EventObject[]) {\n    const { createEvents } = this.getStoreDispatchers('calendar');\n\n    createEvents(events);\n  }\n\n  protected getEventModel(eventId: string, calendarId: string) {\n    const { events } = this.getStoreState('calendar');\n\n    return events.find(\n      ({ id, calendarId: eventCalendarId }) => id === eventId && eventCalendarId === calendarId\n    );\n  }\n\n  /**\n   * Get an {@link EventObject} with event's id and calendar's id.\n   *\n   * @param {string} eventId - event's id\n   * @param {string} calendarId - calendar's id of the event\n   * @returns {EventObject|null} event. If the event can't be found, it returns null.\n   *\n   * @example\n   * const event = calendar.getEvent(eventId, calendarId);\n   *\n   * console.log(event.title);\n   */\n  getEvent(eventId: string, calendarId: string) {\n    return this.getEventModel(eventId, calendarId)?.toEventObject() ?? null;\n  }\n\n  /**\n   * Update an event.\n   *\n   * @param {string} eventId - ID of an event to update\n   * @param {string} calendarId - The calendarId of the event to update\n   * @param {EventObject} changes - The new {@link EventObject} data to apply to the event\n   *\n   * @example\n   * calendar.on('beforeUpdateEvent', function ({ event, changes }) {\n   *   const { id, calendarId } = event;\n   *\n   *   calendar.updateEvent(id, calendarId, changes);\n   * });\n   */\n  updateEvent(eventId: string, calendarId: string, changes: EventObject) {\n    const { updateEvent } = this.getStoreDispatchers('calendar');\n    const event = this.getEventModel(eventId, calendarId);\n\n    if (event) {\n      updateEvent({ event, eventData: changes });\n    }\n  }\n\n  /**\n   * Delete an event.\n   *\n   * @param {string} eventId - event's id to delete\n   * @param {string} calendarId - The CalendarId of the event to delete\n   */\n  deleteEvent(eventId: string, calendarId: string) {\n    const { deleteEvent } = this.getStoreDispatchers('calendar');\n    const event = this.getEventModel(eventId, calendarId);\n\n    if (event) {\n      deleteEvent(event);\n    }\n  }\n\n  /**********\n   * General Methods\n   **********/\n\n  /**\n   * Set events' visibility by calendar ID\n   *\n   * @param {string|Array.<string>} calendarId - The calendar id or ids to change visibility\n   * @param {boolean} isVisible - If set to true, show the events. If set to false, hide the events.\n   */\n  setCalendarVisibility(calendarId: string | string[], isVisible: boolean) {\n    const { setCalendarVisibility } = this.getStoreDispatchers('calendar');\n    const calendarIds = Array.isArray(calendarId) ? calendarId : [calendarId];\n\n    setCalendarVisibility(calendarIds, isVisible);\n  }\n\n  /**\n   * Render the calendar.\n   *\n   * @example\n   * calendar.render();\n   *\n   * @example\n   * // Re-render the calendar when resizing a window.\n   * window.addEventListener('resize', () => {\n   *   calendar.render();\n   * });\n   */\n  render() {\n    if (isPresent(this.container)) {\n      render(\n        <CalendarContainer theme={this.theme} store={this.store} eventBus={this.eventBus}>\n          {this.getComponent()}\n        </CalendarContainer>,\n        this.container\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * For SSR(Server Side Rendering), Return the HTML string of the whole calendar.\n   *\n   * @returns {string} HTML string\n   */\n  renderToString(): string {\n    return renderToString(\n      <CalendarContainer theme={this.theme} store={this.store} eventBus={this.eventBus}>\n        {this.getComponent()}\n      </CalendarContainer>\n    );\n  }\n\n  /**\n   * Delete all events and clear view\n   *\n   * @example\n   * calendar.clear();\n   */\n  clear() {\n    const { clearEvents } = this.getStoreDispatchers('calendar');\n\n    clearEvents();\n  }\n\n  /**\n   * Scroll to current time on today in case of daily, weekly view.\n   * Nothing happens in the monthly view.\n   *\n   * @example\n   * function onNewEvents(events) {\n   *   calendar.createEvents(events);\n   *   calendar.scrollToNow('smooth');\n   * }\n   */\n  scrollToNow(scrollBehavior: ScrollBehaviorOptions = 'auto') {\n    this.eventBus.fire('scrollToNow', scrollBehavior);\n  }\n\n  private calculateRenderRange(renderDate: TZDate) {\n    const { currentView } = this.getStoreState().view;\n    const { options } = this.getStoreState();\n\n    const newRenderDate = new TZDate(renderDate);\n\n    let newRenderRange = { start: new TZDate(newRenderDate), end: new TZDate(newRenderDate) };\n\n    if (currentView === 'month') {\n      newRenderRange = this.calculateMonthRenderDate({\n        renderDate,\n        offset: 0,\n        monthOptions: options.month as CalendarMonthOptions,\n      }).renderRange;\n    } else if (currentView === 'week') {\n      newRenderRange = this.calculateWeekRenderDate({\n        renderDate,\n        offset: 0,\n        weekOptions: options.week as CalendarWeekOptions,\n      }).renderRange;\n    } else if (currentView === 'day') {\n      newRenderRange = this.calculateDayRenderDate({ renderDate, offset: 0 }).renderRange;\n    }\n\n    return newRenderRange;\n  }\n\n  /**\n   * Move to today.\n   *\n   * @example\n   * function onClickTodayBtn() {\n   *   calendar.today();\n   * }\n   */\n  today() {\n    const { setRenderDate } = this.getStoreDispatchers().view;\n    const today = new TZDate();\n\n    setRenderDate(today);\n    this.renderRange = this.calculateRenderRange(today);\n  }\n\n  /**\n   * Move to specific date.\n   *\n   * @param {Date|string|number|TZDate} date - The date to move. it should be eligible parameter to create a `Date` instance if `date` is string or number.\n   * @example\n   * calendar.on('clickDayName', (event) => {\n   *   if (calendar.getViewName() === 'week') {\n   *     const dateToMove = new Date(event.date);\n   *\n   *     calendar.setDate(dateToMove);\n   *     calendar.changeView('day');\n   *   }\n   * });\n   */\n  setDate(date: DateType) {\n    const { setRenderDate } = this.getStoreDispatchers('view');\n    const dateToChange = new TZDate(date);\n\n    setRenderDate(dateToChange);\n    this.renderRange = this.calculateRenderRange(dateToChange);\n  }\n\n  /**\n   * Move the calendar forward to the next range.\n   *\n   * @example\n   * function moveToNextOrPrevRange(offset) {\n   *   if (offset === -1) {\n   *     calendar.prev();\n   *   } else if (offset === 1) {\n   *     calendar.next();\n   *   }\n   * }\n   */\n  next() {\n    this.move(1);\n  }\n\n  /**\n   * Move the calendar backward to the previous range.\n   *\n   * @example\n   * function moveToNextOrPrevRange(offset) {\n   *   if (offset === -1) {\n   *     calendar.prev();\n   *   } else if (offset === 1) {\n   *     calendar.next();\n   *   }\n   * }\n   */\n  prev() {\n    this.move(-1);\n  }\n\n  /**\n   * Change color values of events belong to a certain calendar.\n   *\n   * @param {string} calendarId - The calendar ID\n   * @param {object} colorOptions - The color values of the calendar\n   *   @param {string} colorOptions.color - The text color of the events\n   *   @param {string} colorOptions.borderColor - Left border color of events\n   *   @param {string} colorOptions.backgroundColor - Background color of events\n   *   @param {string} colorOptions.dragBackgroundColor - Background color of events during dragging\n   *\n   * @example\n   * calendar.setCalendarColor('1', {\n   *     color: '#e8e8e8',\n   *     backgroundColor: '#585858',\n   *     borderColor: '#a1b56c',\n   *     dragBackgroundColor: '#585858',\n   * });\n   * calendar.setCalendarColor('2', {\n   *     color: '#282828',\n   *     backgroundColor: '#dc9656',\n   *     borderColor: '#a1b56c',\n   *     dragBackgroundColor: '#dc9656',\n   * });\n   * calendar.setCalendarColor('3', {\n   *     color: '#a16946',\n   *     backgroundColor: '#ab4642',\n   *     borderColor: '#a1b56c',\n   *     dragBackgroundColor: '#ab4642',\n   * });\n   */\n  setCalendarColor(calendarId: string, colorOptions: CalendarColor) {\n    const { setCalendarColor } = this.getStoreDispatchers().calendar;\n\n    setCalendarColor(calendarId, colorOptions);\n  }\n\n  /**\n   * Change current view type.\n   *\n   * @param {string} viewName - The new view name to change to. Available values are 'month', 'week', 'day'.\n   *\n   * @example\n   * // change to daily view\n   * calendar.changeView('day');\n   *\n   * // change to weekly view\n   * calendar.changeView('week');\n   *\n   * // change to monthly view\n   * calendar.changeView('month');\n   */\n  changeView(viewName: ViewType) {\n    const { changeView } = this.getStoreDispatchers('view');\n\n    changeView(viewName);\n    this.renderRange = this.calculateRenderRange(this.getDate());\n  }\n\n  /**\n   * Get the DOM element of the event by event id and calendar id\n   *\n   * @param {string} eventId - ID of event\n   * @param {string} calendarId - calendarId of event\n   * @returns {HTMLElement} event element if found or null\n   *\n   * @example\n   * const element = calendar.getElement(eventId, calendarId);\n   *\n   * console.log(element);\n   */\n  getElement(eventId: string, calendarId: string) {\n    const event = this.getEvent(eventId, calendarId);\n\n    if (event && this.container) {\n      return this.container.querySelector(\n        `[data-event-id=\"${eventId}\"][data-calendar-id=\"${calendarId}\"]`\n      );\n    }\n\n    return null;\n  }\n\n  /**\n   * Set the theme of the calendar.\n   *\n   * @param {Theme} theme - The theme object to apply. For more information, see {@link https://github.com/nhn/tui.calendar/blob/main/docs/en/apis/theme.md|Theme} in guide.\n   *\n   * @example\n   * calendar.setTheme({\n   *   common: {\n   *     gridSelection: {\n   *       backgroundColor: '#333',\n   *     },\n   *   },\n   *   week: {\n   *     nowIndicatorLabel: {\n   *       color: '#00FF00',\n   *     },\n   *   },\n   *   month: {\n   *     dayName: {\n   *       borderLeft: '1px solid #e5e5e5',\n   *     },\n   *   },\n   * });\n   */\n  setTheme(theme: DeepPartial<ThemeState>) {\n    const { setTheme } = this.theme.getState().dispatch;\n\n    setTheme(theme);\n  }\n\n  /**\n   * Get current options.\n   *\n   * @returns {Options} - The current options of the instance\n   */\n  getOptions() {\n    const { options, template } = this.getStoreState();\n    const { dispatch, ...theme } = this.theme.getState();\n\n    return {\n      ...options,\n      template,\n      theme,\n    };\n  }\n\n  /**\n   * Set options of calendar. For more information, see {@link https://github.com/nhn/tui.calendar/blob/main/docs/en/apis/options.md|Options} in guide.\n   *\n   * @param {Options} options - The options to set\n   */\n  setOptions(options: Options) {\n    // destructure options here for tui.doc to generate docs correctly\n    const { theme, template, ...restOptions } = options;\n    const { setTheme } = this.theme.getState().dispatch;\n    const {\n      options: { setOptions },\n      template: { setTemplate },\n    } = this.getStoreDispatchers();\n\n    if (isPresent(theme)) {\n      setTheme(theme);\n    }\n\n    if (isPresent(template)) {\n      setTemplate(template);\n    }\n\n    setOptions(restOptions);\n  }\n\n  /**\n   * Get current rendered date. (see {@link TZDate} for further information)\n   *\n   * @returns {TZDate}\n   */\n  getDate(): TZDate {\n    const { renderDate } = this.getStoreState().view;\n\n    return renderDate;\n  }\n\n  /**\n   * Start time of rendered date range. (see {@link TZDate} for further information)\n   *\n   * @returns {TZDate}\n   */\n  getDateRangeStart() {\n    return this.renderRange.start;\n  }\n\n  /**\n   * End time of rendered date range. (see {@link TZDate} for further information)\n   *\n   * @returns {TZDate}\n   */\n  getDateRangeEnd() {\n    return this.renderRange.end;\n  }\n\n  /**\n   * Get current view name('day', 'week', 'month').\n   *\n   * @returns {string} current view name ('day', 'week', 'month')\n   */\n  getViewName(): ViewType {\n    const { currentView } = this.getStoreState('view');\n\n    return currentView;\n  }\n\n  /**\n   * Set calendar list.\n   *\n   * @param {CalendarInfo[]} calendars - list of calendars\n   */\n  setCalendars(calendars: CalendarInfo[]) {\n    const { setCalendars } = this.getStoreDispatchers().calendar;\n\n    setCalendars(calendars);\n  }\n\n  // TODO: specify position of popup\n  /**\n   * Open event form popup with predefined form values.\n   *\n   * @param {EventObject} event - The predefined {@link EventObject} data to show in form.\n   */\n  openFormPopup(event: EventObject) {\n    const { showFormPopup } = this.getStoreDispatchers().popup;\n\n    const eventModel = new EventModel(event);\n    const { title, location, start, end, isAllday, isPrivate, state: eventState } = eventModel;\n\n    showFormPopup({\n      isCreationPopup: true,\n      event: eventModel,\n      title,\n      location,\n      start,\n      end,\n      isAllday,\n      isPrivate,\n      eventState,\n    });\n  }\n\n  clearGridSelections() {\n    const { clearAll } = this.getStoreDispatchers().gridSelection;\n\n    clearAll();\n  }\n\n  fire<EventName extends keyof ExternalEventTypes>(\n    eventName: EventName,\n    ...args: Parameters<ExternalEventTypes[EventName]>\n  ): EventBus<ExternalEventTypes> {\n    this.eventBus.fire(eventName, ...args);\n\n    return this;\n  }\n\n  off<EventName extends keyof ExternalEventTypes>(\n    eventName?: EventName,\n    handler?: ExternalEventTypes[EventName]\n  ): EventBus<ExternalEventTypes> {\n    this.eventBus.off(eventName, handler);\n\n    return this;\n  }\n\n  on<EventName extends keyof ExternalEventTypes>(\n    eventName: EventName,\n    handler: ExternalEventTypes[EventName]\n  ): EventBus<ExternalEventTypes> {\n    this.eventBus.on(eventName, handler);\n\n    return this;\n  }\n\n  once<EventName extends keyof ExternalEventTypes>(\n    eventName: EventName,\n    handler: ExternalEventTypes[EventName]\n  ): EventBus<ExternalEventTypes> {\n    this.eventBus.once(eventName, handler);\n\n    return this;\n  }\n}\n"],"names":[],"sourceRoot":""}