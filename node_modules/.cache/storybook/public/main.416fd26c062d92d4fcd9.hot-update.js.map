{"version":3,"file":"main.416fd26c062d92d4fcd9.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;;AAiBA;AAGA;AACA;AACA;;AAEA;AACA;AAAA;AAMA;AAAA;AAKA;AAAA;AAXA;AAYA;AAAA;AAAA;AAbA;;AAgBA;AACA;AACA;;AAEA;AACA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAgBA;AAEA;AACA;;AAEA;AAAA;AACA;AACA;AADA;AAIA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;;AAWA;AACA;AACA;;AAEA;AACA;;AAEA;AAGA;AACA;AACA;AACA;AAFA;AAIA;;AAEA;AACA;AACA;AAFA;AAKA;;AAEA;AAAA;AAAA;AAGA;AACA;;;AAWA;AACA;AAAA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AADA;AAeA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;;AACA;AACA;AACA;;AAEA;AACA;AAGA;;AAEA;AACA;AAdA;AADA;AAkBA","sources":["webpack://@toast-ui/calendar/./src/slices/options.ts"],"sourcesContent":["import produce from 'immer';\n\nimport { DEFAULT_DAY_NAMES } from '@src/helpers/dayName';\nimport { compare, Day } from '@src/time/datetime';\nimport { last } from '@src/utils/array';\nimport { mergeObject } from '@src/utils/object';\nimport { isBoolean } from '@src/utils/type';\n\nimport type { EventObject, EventObjectWithDefaultValues } from '@t/events';\nimport type {\n  CollapseDuplicateEventsOptions,\n  GridSelectionOptions,\n  Options,\n  TimezoneOptions,\n} from '@t/options';\nimport type {\n  CalendarMonthOptions,\n  CalendarState,\n  CalendarStore,\n  CalendarWeekOptions,\n  SetState,\n} from '@t/store';\n\nfunction initializeCollapseDuplicateEvents(\n  options: boolean | Partial<CollapseDuplicateEventsOptions>\n): boolean | CollapseDuplicateEventsOptions {\n  if (!options) {\n    return false;\n  }\n\n  const initialCollapseDuplicateEvents = {\n    getDuplicateEvents: (\n      targetEvent: EventObjectWithDefaultValues,\n      events: EventObjectWithDefaultValues[]\n    ) =>\n      events\n        .filter(\n          (event: EventObjectWithDefaultValues) =>\n            event.title === targetEvent.title &&\n            compare(event.start, targetEvent.start) === 0 &&\n            compare(event.end, targetEvent.end) === 0\n        )\n        .sort((a, b) => (a.calendarId > b.calendarId ? 1 : -1)),\n    getMainEvent: (events: EventObjectWithDefaultValues[]) => last(events),\n  };\n\n  if (isBoolean(options)) {\n    return initialCollapseDuplicateEvents;\n  }\n\n  return { ...initialCollapseDuplicateEvents, ...options };\n}\n\nfunction initializeWeekOptions(weekOptions: Options['week'] = {}): CalendarWeekOptions {\n  const week: CalendarWeekOptions = {\n    startDayOfWeek: Day.SUN,\n    dayNames: [],\n    narrowWeekend: false,\n    workweek: false,\n    showNowIndicator: true,\n    showTimezoneCollapseButton: false,\n    timezonesCollapsed: false,\n    hourStart: 0,\n    hourEnd: 24,\n    eventView: true,\n    taskView: true,\n    collapseDuplicateEvents: false,\n    ...weekOptions,\n  };\n\n  week.collapseDuplicateEvents = initializeCollapseDuplicateEvents(week.collapseDuplicateEvents);\n\n  return week;\n}\n\nfunction initializeTimezoneOptions(timezoneOptions: Options['timezone'] = {}): TimezoneOptions {\n  return {\n    zones: [],\n    ...timezoneOptions,\n  };\n}\n\nfunction initializeMonthOptions(monthOptions: Options['month'] = {}): CalendarMonthOptions {\n  const month: CalendarMonthOptions = {\n    dayNames: [],\n    visibleWeeksCount: 0,\n    workweek: false,\n    narrowWeekend: false,\n    startDayOfWeek: Day.SUN,\n    isAlways6Weeks: true,\n    visibleEventCount: 6,\n    ...monthOptions,\n  };\n\n  if (month.dayNames.length === 0) {\n    month.dayNames = DEFAULT_DAY_NAMES.slice() as Exclude<CalendarMonthOptions['dayNames'], []>;\n  }\n\n  return month;\n}\n\nexport function initializeGridSelectionOptions(\n  options: Options['gridSelection']\n): GridSelectionOptions {\n  if (isBoolean(options)) {\n    return {\n      enableDblClick: options,\n      enableClick: options,\n    };\n  }\n\n  return {\n    enableDblClick: true,\n    enableClick: true,\n    ...options,\n  };\n}\n\nconst initialEventFilter = (event: EventObject) => !!event.isVisible;\n\n// TODO: some of options has default values. so it should be `Required` type.\n// But it needs a complex type such as `DeepRequired`.\n// maybe leveraging library like `ts-essential` might be helpful.\nexport type OptionsSlice = {\n  options: Omit<Required<Options>, 'template' | 'calendars' | 'theme'> & {\n    gridSelection: GridSelectionOptions;\n  };\n};\n\nexport type OptionsDispatchers = {\n  setOptions: (newOptions: Partial<OptionsSlice['options']>) => void;\n};\n\n// eslint-disable-next-line complexity\nexport function createOptionsSlice(options: Options = {}): OptionsSlice {\n  return {\n    options: {\n      defaultView: options.defaultView ?? 'week',\n      useFormPopup: options.useFormPopup ?? false,\n      useDetailPopup: options.useDetailPopup ?? false,\n      isReadOnly: options.isReadOnly ?? false,\n      week: initializeWeekOptions(options.week),\n      month: initializeMonthOptions(options.month),\n      gridSelection: initializeGridSelectionOptions(options.gridSelection),\n      usageStatistics: options.usageStatistics ?? true,\n      eventFilter: options.eventFilter ?? initialEventFilter,\n      timezone: initializeTimezoneOptions(options.timezone),\n      allOptions: options\n    },\n  };\n}\n\nexport function createOptionsDispatchers(set: SetState<CalendarStore>): OptionsDispatchers {\n  return {\n    setOptions: (newOptions: Partial<OptionsSlice['options']> = {}) =>\n      set(\n        produce<CalendarState>((state) => {\n          if (newOptions.gridSelection) {\n            newOptions.gridSelection = initializeGridSelectionOptions(newOptions.gridSelection);\n          }\n\n          if (newOptions.week?.collapseDuplicateEvents) {\n            newOptions.week.collapseDuplicateEvents = initializeCollapseDuplicateEvents(\n              newOptions.week.collapseDuplicateEvents\n            );\n          }\n\n          mergeObject(state.options, newOptions);\n        })\n      ),\n  };\n}\n"],"names":[],"sourceRoot":""}