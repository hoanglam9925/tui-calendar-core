{"version":3,"file":"main.7eef444062485d62979e.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAaA;AACA;AACA;AACA;AAFA;AAIA;;AAEA;AACA;AACA;AAEA;AACA;;AAEA;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAEA;AAEA;AAFA;AAMA;AACA;AAPA;AAUA;;AAEA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;;AAEA;AAAA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;;AASA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;;AACA;AAAA;AAAA;;AAEA;AAAA;;AACA;AAAA;;AAEA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;;AACA;AACA;AAEA;AAEA;AACA;AAFA;AAMA;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AA1BA;;AA6BA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AAEA;AACA;AAHA;AAKA;AAPA;AAWA;AACA;AAAA;AAAA;AAFA;AAKA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAKA","sources":["webpack://@toast-ui/calendar/./src/components/events/horizontalEvent.tsx"],"sourcesContent":["import { h } from 'preact';\nimport { useEffect, useRef, useState } from 'preact/hooks';\n\nimport { HorizontalEventResizeIcon } from '@src/components/events/horizontalEventResizeIcon';\nimport { Template } from '@src/components/template';\nimport { useDispatch, useStore } from '@src/contexts/calendarStore';\nimport { useEventBus } from '@src/contexts/eventBus';\nimport { useLayoutContainer } from '@src/contexts/layoutContainer';\nimport { cls, getEventColors, toPercent, toPx } from '@src/helpers/css';\nimport { DRAGGING_TYPE_CREATORS } from '@src/helpers/drag';\nimport { useCalendarColor } from '@src/hooks/calendar/useCalendarColor';\nimport { useDrag } from '@src/hooks/common/useDrag';\nimport { useTransientUpdate } from '@src/hooks/common/useTransientUpdate';\nimport type EventUIModel from '@src/model/eventUIModel';\nimport { dndSelector, optionsSelector, viewSelector } from '@src/selectors';\nimport { DraggingState } from '@src/slices/dnd';\nimport { isSameDate } from '@src/time/datetime';\nimport { passConditionalProp } from '@src/utils/preact';\nimport { isPresent } from '@src/utils/type';\n\nimport type { CalendarColor } from '@t/options';\n\ninterface Props {\n  uiModel: EventUIModel;\n  eventHeight: number;\n  headerHeight: number;\n  resizingWidth?: string | null;\n  flat?: boolean;\n  movingLeft?: number | null;\n}\n\nfunction getMargins(flat: boolean) {\n  return {\n    vertical: flat ? 5 : 2,\n    horizontal: 8,\n  };\n}\n\nfunction getBorderRadius(exceedLeft: boolean, exceedRight: boolean): string {\n  const leftBorderRadius = exceedLeft ? 0 : '2px';\n  const rightBorderRadius = exceedRight ? 0 : '2px';\n\n  return `${leftBorderRadius} ${rightBorderRadius} ${rightBorderRadius} ${leftBorderRadius}`;\n}\n\nfunction getEventItemStyle({\n  uiModel,\n  flat,\n  eventHeight,\n  isDraggingTarget,\n  calendarColor,\n}: Required<Pick<Props, 'uiModel' | 'flat' | 'eventHeight'>> & {\n  isDraggingTarget: boolean;\n  calendarColor: CalendarColor;\n}) {\n  const { exceedLeft, exceedRight } = uiModel;\n  const { color, backgroundColor, dragBackgroundColor, borderColor } = getEventColors(\n    uiModel,\n    calendarColor\n  );\n\n  const defaultItemStyle = {\n    color,\n    backgroundColor: isDraggingTarget ? dragBackgroundColor : backgroundColor,\n    borderLeft: exceedLeft ? 'none' : `3px solid ${borderColor}`,\n    borderRadius: getBorderRadius(exceedLeft, exceedRight),\n    overflow: 'hidden',\n    height: eventHeight,\n    lineHeight: toPx(eventHeight),\n    opacity: isDraggingTarget ? 0.5 : 1,\n  };\n  const margins = getMargins(flat);\n\n  return flat\n    ? {\n        marginTop: margins.vertical,\n        ...defaultItemStyle,\n      }\n    : {\n        marginLeft: exceedLeft ? 0 : margins.horizontal,\n        marginRight: exceedRight ? 0 : margins.horizontal,\n        ...defaultItemStyle,\n      };\n}\n\nfunction getContainerStyle({\n  flat,\n  uiModel,\n  resizingWidth,\n  movingLeft,\n  eventHeight,\n  headerHeight,\n}: Required<Props>) {\n  const { top, left, width, model } = uiModel;\n  const margins = getMargins(flat);\n\n  const baseStyle = flat\n    ? {}\n    : {\n        width: resizingWidth || toPercent(width),\n        left: toPercent(movingLeft ?? left),\n        top: (top - 1) * (eventHeight + margins.vertical) + headerHeight,\n        position: 'absolute',\n      };\n\n  return Object.assign(baseStyle, model.customStyle);\n}\n\nfunction getTestId({ model }: EventUIModel) {\n  const calendarId = model.calendarId ? `${model.calendarId}-` : '';\n  const id = model.id ? `${model.id}-` : '';\n\n  return `${calendarId}${id}${model.title}`;\n}\n\nconst classNames = {\n  eventBody: cls('weekday-event'),\n  eventTitle: cls('weekday-event-title'),\n  eventDot: cls('weekday-event-dot'),\n  moveEvent: cls('dragging--move-event'),\n  resizeEvent: cls('dragging--resize-horizontal-event'),\n};\n\n// eslint-disable-next-line complexity\nexport function HorizontalEvent({\n  flat = false,\n  uiModel,\n  eventHeight,\n  headerHeight,\n  resizingWidth = null,\n  movingLeft = null,\n}: Props) {\n  const { currentView } = useStore(viewSelector);\n  const { useDetailPopup, isReadOnly: isReadOnlyCalendar } = useStore(optionsSelector);\n\n  const { setDraggingEventUIModel } = useDispatch('dnd');\n  const { showDetailPopup } = useDispatch('popup');\n\n  const layoutContainer = useLayoutContainer();\n  const eventBus = useEventBus();\n  const calendarColor = useCalendarColor(uiModel.model);\n\n  const [isDraggingTarget, setIsDraggingTarget] = useState<boolean>(false);\n  const eventContainerRef = useRef<HTMLDivElement>(null);\n\n  const { isReadOnly, id, calendarId } = uiModel.model;\n\n  const isDraggingGuideEvent = isPresent(resizingWidth) || isPresent(movingLeft);\n  const isDraggableEvent = !isReadOnlyCalendar && !isReadOnly && !isDraggingGuideEvent;\n\n  const startDragEvent = (className: string) => {\n    setDraggingEventUIModel(uiModel);\n    layoutContainer?.classList.add(className);\n  };\n  const endDragEvent = (className: string) => {\n    setIsDraggingTarget(false);\n    layoutContainer?.classList.remove(className);\n  };\n\n  useTransientUpdate(dndSelector, ({ draggingEventUIModel, draggingState }) => {\n    if (\n      draggingState === DraggingState.DRAGGING &&\n      draggingEventUIModel?.cid() === uiModel.cid() &&\n      !isDraggingGuideEvent\n    ) {\n      setIsDraggingTarget(true);\n    } else {\n      setIsDraggingTarget(false);\n    }\n  });\n\n  useEffect(() => {\n    if (!isDraggingGuideEvent) {\n      eventBus.fire('afterRenderEvent', uiModel.model.toEventObject());\n    }\n    // This effect is only for the first render.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onResizeStart = useDrag(DRAGGING_TYPE_CREATORS.resizeEvent('dayGrid', `${uiModel.cid()}`), {\n    onDragStart: () => startDragEvent(classNames.resizeEvent),\n    onMouseUp: () => endDragEvent(classNames.resizeEvent),\n    onPressESCKey: () => endDragEvent(classNames.resizeEvent),\n  });\n  const onMoveStart = useDrag(DRAGGING_TYPE_CREATORS.moveEvent('dayGrid', `${uiModel.cid()}`), {\n    onDragStart: () => {\n      if (isDraggableEvent) {\n        startDragEvent(classNames.moveEvent);\n      }\n    },\n    onMouseUp: (e, { draggingState }) => {\n      endDragEvent(classNames.moveEvent);\n\n      const isClick = draggingState <= DraggingState.INIT;\n      if (isClick && useDetailPopup && eventContainerRef.current) {\n        console.log(uiModel);\n        \n        showDetailPopup(\n          {\n            event: uiModel.model,\n            eventRect: eventContainerRef.current.getBoundingClientRect(),\n          },\n          flat\n        );\n      }\n\n      if (isClick) {\n        eventBus.fire('clickEvent', { event: uiModel.model.toEventObject(), nativeEvent: e });\n      }\n    },\n    onPressESCKey: () => endDragEvent(classNames.moveEvent),\n  });\n\n  const handleResizeStart = (e: MouseEvent) => {\n    e.stopPropagation();\n\n    if (isDraggableEvent) {\n      onResizeStart(e);\n    }\n  };\n\n  const handleMoveStart = (e: MouseEvent) => {\n    e.stopPropagation();\n    onMoveStart(e);\n  };\n\n  const isDotEvent =\n    !isDraggingTarget &&\n    currentView === 'month' &&\n    uiModel.model.category === 'time' &&\n    isSameDate(uiModel.model.start, uiModel.model.end);\n  const shouldHideResizeHandler =\n    !isDraggableEvent || flat || isDraggingTarget || uiModel.exceedRight;\n  const containerStyle = getContainerStyle({\n    uiModel,\n    eventHeight,\n    headerHeight,\n    flat,\n    movingLeft,\n    resizingWidth,\n  });\n  const eventItemStyle = getEventItemStyle({\n    uiModel,\n    flat,\n    eventHeight,\n    isDraggingTarget,\n    calendarColor,\n  });\n\n  return (\n    <div\n      className={cls('weekday-event-block', {\n        'weekday-exceed-left': uiModel.exceedLeft,\n        'weekday-exceed-right': uiModel.exceedRight,\n      })}\n      style={containerStyle}\n      data-testid={passConditionalProp(isDraggableEvent, getTestId(uiModel))}\n      data-calendar-id={calendarId}\n      data-event-id={id}\n      ref={eventContainerRef}\n    >\n      <div\n        className={classNames.eventBody}\n        style={{\n          ...eventItemStyle,\n          backgroundColor: isDotEvent ? null : eventItemStyle.backgroundColor,\n          borderLeft: isDotEvent ? null : eventItemStyle.borderLeft,\n        }}\n        onMouseDown={handleMoveStart}\n      >\n        {isDotEvent ? (\n          <span\n            className={classNames.eventDot}\n            style={{ backgroundColor: eventItemStyle.backgroundColor }}\n          />\n        ) : null}\n        <span className={classNames.eventTitle}>\n          <Template template={uiModel.model.category} param={uiModel.model} />\n        </span>\n        {!shouldHideResizeHandler ? (\n          <HorizontalEventResizeIcon onMouseDown={handleResizeStart} />\n        ) : null}\n      </div>\n    </div>\n  );\n}\n"],"names":[],"sourceRoot":""}